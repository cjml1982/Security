/* -*- Mode:C++; c-file-style:"gnu"; indent-tabs-mode:nil -*- */
/**
 * Copyright (C) 2016-2017 Regents of the University of California.
 * @author: Jeff Thompson <jefft0@remap.ucla.edu>
 * @author: From ndn-group-encrypt src/producer https://github.com/named-data/ndn-group-encrypt
 * @author: excludeRange from ndn-cxx https://github.com/named-data/ndn-cxx/blob/master/src/exclude.cpp
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version, with the additional exemption that
 * compiling, linking, and/or using OpenSSL is allowed.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 * A copy of the GNU Lesser General Public License is in the file COPYING.
 */

#ifndef NDN_SECCONTROLER_HPP
#define NDN_SECCONTROLER_HPP

#include <stdio.h>
#include <iostream>
#include <cstdlib>
#include <fstream>
#include <stdexcept>
#include <unistd.h>

#include <map>
#include "../face.hpp"
#include "../security/key-chain.hpp"
#include "encrypt-error.hpp"
#include "producer-db.hpp"

using namespace std;
using namespace pki;
using namespace pki::func_lib;

static uint8_t DATA_CONTENT[] = {
  0xcb, 0xe5, 0x6a, 0x80, 0x41, 0x24, 0x58, 0x23,
  0x84, 0x14, 0x15, 0x61, 0x80, 0xb9, 0x5e, 0xbd,
  0xce, 0x32, 0xb4, 0xbe, 0xbc, 0x91, 0x31, 0xd6,
  0x19, 0x00, 0x80, 0x8b, 0xfa, 0x00, 0x05, 0x9c
};

static uint8_t AES_KEY[] = {
  0xdd, 0x60, 0x77, 0xec, 0xa9, 0x6b, 0x23, 0x1b,
  0x40, 0x6b, 0x5a, 0xf8, 0x7d, 0x3d, 0x55, 0x32
};

static uint8_t INITIAL_VECTOR[] = {
  0x73, 0x6f, 0x6d, 0x65, 0x72, 0x61, 0x6e, 0x64,
  0x6f, 0x6d, 0x76, 0x65, 0x63, 0x74, 0x6f, 0x72
};

static uint8_t DEFAULT_RSA_PUBLIC_KEY_DER[] = {
  0x30, 0x82, 0x01, 0x22, 0x30, 0x0d, 0x06, 0x09, 0x2a, 0x86, 0x48, 0x86, 0xf7, 0x0d, 0x01, 0x01,
  0x01, 0x05, 0x00, 0x03, 0x82, 0x01, 0x0f, 0x00, 0x30, 0x82, 0x01, 0x0a, 0x02, 0x82, 0x01, 0x01,
  0x00, 0xd4, 0x4f, 0xd9, 0xae, 0x7a, 0xd2, 0x87, 0x80, 0x67, 0x11, 0x31, 0xb8, 0x5b, 0xac, 0x8b,
  0x5f, 0xf2, 0x21, 0x28, 0x2c, 0x70, 0xec, 0x66, 0xe9, 0x18, 0xee, 0x5e, 0xf1, 0xe3, 0xef, 0x09,
  0xcb, 0x5e, 0xe0, 0xcd, 0xe4, 0x39, 0x6a, 0x3f, 0x43, 0x2a, 0x3e, 0x1a, 0x06, 0xf2, 0xcc, 0xb0,
  0x0f, 0x5b, 0xd8, 0xa1, 0x3f, 0x1c, 0xb8, 0xfa, 0x8c, 0xa4, 0xbf, 0xa0, 0x57, 0x61, 0xcb, 0x35,
  0xa9, 0x0f, 0x56, 0x76, 0x57, 0x05, 0xa4, 0x56, 0x90, 0x64, 0x3d, 0x0e, 0x6e, 0x24, 0x43, 0x5e,
  0x54, 0x02, 0x99, 0x5b, 0xbe, 0x05, 0xab, 0xc9, 0xfb, 0xb7, 0x8f, 0x17, 0xcb, 0x59, 0xc0, 0x42,
  0x47, 0x79, 0xb1, 0xb8, 0x5c, 0x97, 0xef, 0xab, 0x65, 0x21, 0x88, 0xbd, 0x58, 0x3e, 0x9a, 0x8e,
  0x77, 0x84, 0x6c, 0x3d, 0x1a, 0x71, 0x7a, 0xb5, 0x9b, 0xc4, 0xde, 0xe5, 0x24, 0x18, 0x62, 0x61,
  0x58, 0x40, 0x14, 0x65, 0x6d, 0x8f, 0xa4, 0x82, 0x3e, 0xbe, 0xe9, 0x7a, 0xfa, 0x54, 0x9d, 0x9a,
  0xd3, 0x93, 0x44, 0x5c, 0x62, 0x9a, 0x26, 0x5e, 0x6b, 0x4c, 0xb5, 0x15, 0xe4, 0xe9, 0x4b, 0x4f,
  0x06, 0xd7, 0x59, 0x46, 0xfc, 0x4b, 0x3e, 0x09, 0x01, 0x0b, 0xd4, 0xa8, 0xcb, 0x39, 0x15, 0x4d,
  0x05, 0x0f, 0x3f, 0x08, 0x51, 0x8e, 0x3a, 0x20, 0x7e, 0xb3, 0x01, 0x7b, 0xe0, 0xeb, 0x3d, 0x62,
  0xdc, 0x0a, 0x9e, 0x63, 0x57, 0xcd, 0x68, 0xd8, 0xbe, 0xff, 0x3e, 0x3c, 0x33, 0x6c, 0x0d, 0xd8,
  0xb5, 0x4e, 0xdf, 0xeb, 0xef, 0x3b, 0x7d, 0xba, 0x32, 0xc0, 0x53, 0x48, 0x7e, 0x77, 0x91, 0xc7,
  0x7a, 0x2d, 0xb8, 0xaf, 0x8b, 0xe7, 0x8c, 0x0e, 0xa9, 0x39, 0x49, 0xdc, 0xa5, 0x4e, 0x7d, 0x3b,
  0xc9, 0xbf, 0x18, 0x41, 0x5e, 0xc0, 0x55, 0x4f, 0x90, 0x66, 0xfb, 0x19, 0xc8, 0x4b, 0x11, 0x93,
  0xff, 0x02, 0x03, 0x01, 0x00, 0x01
};

static uint8_t DEFAULT_RSA_PRIVATE_KEY_DER[] = {
  0x30, 0x82, 0x04, 0xa4, 0x02, 0x01,
  0x00, 0x02, 0x82, 0x01, 0x01, 0x00, 0xd4, 0x4f, 0xd9, 0xae, 0x7a, 0xd2, 0x87, 0x80, 0x67, 0x11,
  0x31, 0xb8, 0x5b, 0xac, 0x8b, 0x5f, 0xf2, 0x21, 0x28, 0x2c, 0x70, 0xec, 0x66, 0xe9, 0x18, 0xee,
  0x5e, 0xf1, 0xe3, 0xef, 0x09, 0xcb, 0x5e, 0xe0, 0xcd, 0xe4, 0x39, 0x6a, 0x3f, 0x43, 0x2a, 0x3e,
  0x1a, 0x06, 0xf2, 0xcc, 0xb0, 0x0f, 0x5b, 0xd8, 0xa1, 0x3f, 0x1c, 0xb8, 0xfa, 0x8c, 0xa4, 0xbf,
  0xa0, 0x57, 0x61, 0xcb, 0x35, 0xa9, 0x0f, 0x56, 0x76, 0x57, 0x05, 0xa4, 0x56, 0x90, 0x64, 0x3d,
  0x0e, 0x6e, 0x24, 0x43, 0x5e, 0x54, 0x02, 0x99, 0x5b, 0xbe, 0x05, 0xab, 0xc9, 0xfb, 0xb7, 0x8f,
  0x17, 0xcb, 0x59, 0xc0, 0x42, 0x47, 0x79, 0xb1, 0xb8, 0x5c, 0x97, 0xef, 0xab, 0x65, 0x21, 0x88,
  0xbd, 0x58, 0x3e, 0x9a, 0x8e, 0x77, 0x84, 0x6c, 0x3d, 0x1a, 0x71, 0x7a, 0xb5, 0x9b, 0xc4, 0xde,
  0xe5, 0x24, 0x18, 0x62, 0x61, 0x58, 0x40, 0x14, 0x65, 0x6d, 0x8f, 0xa4, 0x82, 0x3e, 0xbe, 0xe9,
  0x7a, 0xfa, 0x54, 0x9d, 0x9a, 0xd3, 0x93, 0x44, 0x5c, 0x62, 0x9a, 0x26, 0x5e, 0x6b, 0x4c, 0xb5,
  0x15, 0xe4, 0xe9, 0x4b, 0x4f, 0x06, 0xd7, 0x59, 0x46, 0xfc, 0x4b, 0x3e, 0x09, 0x01, 0x0b, 0xd4,
  0xa8, 0xcb, 0x39, 0x15, 0x4d, 0x05, 0x0f, 0x3f, 0x08, 0x51, 0x8e, 0x3a, 0x20, 0x7e, 0xb3, 0x01,
  0x7b, 0xe0, 0xeb, 0x3d, 0x62, 0xdc, 0x0a, 0x9e, 0x63, 0x57, 0xcd, 0x68, 0xd8, 0xbe, 0xff, 0x3e,
  0x3c, 0x33, 0x6c, 0x0d, 0xd8, 0xb5, 0x4e, 0xdf, 0xeb, 0xef, 0x3b, 0x7d, 0xba, 0x32, 0xc0, 0x53,
  0x48, 0x7e, 0x77, 0x91, 0xc7, 0x7a, 0x2d, 0xb8, 0xaf, 0x8b, 0xe7, 0x8c, 0x0e, 0xa9, 0x39, 0x49,
  0xdc, 0xa5, 0x4e, 0x7d, 0x3b, 0xc9, 0xbf, 0x18, 0x41, 0x5e, 0xc0, 0x55, 0x4f, 0x90, 0x66, 0xfb,
  0x19, 0xc8, 0x4b, 0x11, 0x93, 0xff, 0x02, 0x03, 0x01, 0x00, 0x01, 0x02, 0x82, 0x01, 0x00, 0x0f,
  0xa1, 0x85, 0x5c, 0x44, 0x2c, 0xa5, 0xcf, 0x3d, 0x47, 0x55, 0xca, 0xc5, 0xed, 0x11, 0x21, 0xd2,
  0x38, 0xc0, 0xb5, 0x6c, 0xe6, 0xea, 0xb8, 0xb4, 0x9e, 0x30, 0x1d, 0x4c, 0xf3, 0xb7, 0x5b, 0xe2,
  0xb3, 0x58, 0x55, 0x3a, 0x28, 0xe9, 0x59, 0x6f, 0x8d, 0xbc, 0xea, 0xd0, 0x0b, 0x63, 0xd6, 0xed,
  0xa3, 0x28, 0x53, 0xf6, 0x30, 0x64, 0x39, 0xe0, 0x93, 0x3f, 0x21, 0xcf, 0xd0, 0x5f, 0x36, 0x00,
  0x2c, 0x14, 0x70, 0x59, 0xb8, 0xfc, 0xaa, 0x8a, 0xc6, 0xb7, 0xfe, 0x41, 0xeb, 0x37, 0xd1, 0xa5,
  0x93, 0x56, 0xde, 0xc9, 0x9a, 0x19, 0x37, 0xd0, 0x0e, 0xd7, 0xe8, 0x9f, 0xc5, 0xf8, 0xdb, 0x3c,
  0x49, 0x6a, 0x52, 0x5e, 0xd9, 0x45, 0x5c, 0x1f, 0xb8, 0xea, 0x7f, 0xc9, 0xb4, 0x25, 0x53, 0x05,
  0x4b, 0xd6, 0xbf, 0xd0, 0xa5, 0x01, 0x23, 0xe3, 0xbd, 0xa9, 0x4f, 0x1c, 0x00, 0x7a, 0x3c, 0x1b,
  0xbb, 0xaa, 0x08, 0xd9, 0xd2, 0x8c, 0xdb, 0xb4, 0x6c, 0xff, 0x57, 0x64, 0x82, 0xbb, 0x02, 0x71,
  0x2d, 0x99, 0xea, 0x8a, 0x4e, 0x5a, 0xdb, 0x82, 0x20, 0x32, 0x51, 0xf8, 0x30, 0x98, 0x67, 0x4a,
  0x31, 0x73, 0xb1, 0xd7, 0x51, 0xc5, 0x71, 0x82, 0x2b, 0x99, 0xbc, 0x0c, 0xfa, 0x24, 0x4c, 0x0b,
  0x38, 0x73, 0xd8, 0xef, 0x6f, 0x5b, 0xda, 0x56, 0xc8, 0x6b, 0xcb, 0xf5, 0xc6, 0xaa, 0x4d, 0x8b,
  0x39, 0x0f, 0x0a, 0x43, 0x4e, 0x8b, 0x87, 0xe7, 0x98, 0x5a, 0x0d, 0x94, 0x55, 0xc7, 0x42, 0xb4,
  0x13, 0xfa, 0xed, 0x9c, 0xfe, 0xea, 0x2d, 0x95, 0xc1, 0xdc, 0x2f, 0x5d, 0x44, 0xf5, 0x2d, 0xab,
  0x8b, 0x79, 0x70, 0x0f, 0xe9, 0xa7, 0x17, 0xe8, 0x40, 0xd7, 0xa5, 0x0d, 0x97, 0xe9, 0x53, 0xa4,
  0xb4, 0x70, 0xbe, 0x19, 0x7b, 0x86, 0x2c, 0x26, 0xe7, 0xb1, 0x23, 0x22, 0x5a, 0xbd, 0x91, 0x02,
  0x81, 0x81, 0x00, 0xe2, 0x4d, 0x3c, 0xdc, 0x23, 0xb5, 0x2d, 0xc4, 0x66, 0xe7, 0xf2, 0xa4, 0x33,
  0xb9, 0xd6, 0xdd, 0x39, 0xc6, 0xee, 0x0e, 0xe6, 0x23, 0xbb, 0x9c, 0xf0, 0x6a, 0x10, 0xa8, 0x12,
  0xaa, 0x15, 0x8c, 0x08, 0x51, 0x5d, 0xed, 0x46, 0x33, 0xb0, 0x5d, 0x72, 0x02, 0xa0, 0x16, 0xb8,
  0xcf, 0xaa, 0x27, 0x09, 0x74, 0x97, 0x8c, 0xac, 0x8d, 0x4e, 0xbc, 0xe8, 0x62, 0xe5, 0x1e, 0x3c,
  0x74, 0xbb, 0xe9, 0xb9, 0xa6, 0x91, 0x02, 0x3f, 0x43, 0x4d, 0x2f, 0x01, 0x2a, 0x1c, 0xff, 0x4f,
  0x05, 0xf5, 0x98, 0x57, 0x3f, 0x67, 0xb0, 0x2d, 0x84, 0x2d, 0xd3, 0xf5, 0xb9, 0xd7, 0x37, 0x39,
  0x2a, 0x44, 0x04, 0x58, 0xa4, 0x17, 0x1e, 0x47, 0x38, 0x3f, 0x7d, 0x61, 0x97, 0xf2, 0xe4, 0xe5,
  0xeb, 0xe8, 0xbf, 0x55, 0xac, 0x6b, 0x74, 0xb8, 0x55, 0x2b, 0x1c, 0x12, 0x2a, 0x9c, 0x11, 0xf0,
  0x5b, 0x9d, 0xd7, 0x02, 0x81, 0x81, 0x00, 0xf0, 0x2c, 0x9d, 0xa3, 0x34, 0x0b, 0x6a, 0x01, 0x69,
  0x6c, 0xaa, 0xbf, 0xee, 0x95, 0xcc, 0x12, 0x24, 0x37, 0xeb, 0xda, 0x30, 0xdb, 0xe5, 0x4b, 0x34,
  0x5b, 0x56, 0x9e, 0x46, 0xeb, 0xe5, 0xb5, 0x75, 0x45, 0xac, 0xb7, 0xa2, 0x52, 0x69, 0x04, 0xd2,
  0x5f, 0x98, 0x59, 0x4f, 0xb6, 0xf3, 0x8e, 0x9f, 0x34, 0x8d, 0x07, 0x22, 0x7e, 0xc0, 0x28, 0x79,
  0xe1, 0x25, 0x0a, 0x03, 0x96, 0xb8, 0xa8, 0x0f, 0xc8, 0x37, 0x2d, 0xb0, 0xe8, 0xc0, 0x1e, 0x3b,
  0x4a, 0xf2, 0xcc, 0x6b, 0x60, 0x83, 0x88, 0x2d, 0x71, 0x8f, 0x91, 0xab, 0x1a, 0x02, 0x8e, 0x03,
  0xfb, 0xc2, 0x9a, 0x4e, 0x91, 0xd4, 0x49, 0x2c, 0x4c, 0x69, 0x8c, 0xe9, 0x4b, 0xbe, 0x88, 0xe2,
  0xd9, 0xa8, 0x7f, 0x3d, 0xe9, 0x67, 0x39, 0xd7, 0xd4, 0x11, 0xa0, 0xb1, 0xcd, 0x8b, 0x59, 0x5f,
  0xce, 0x35, 0x16, 0x26, 0x30, 0xe6, 0x19, 0x02, 0x81, 0x81, 0x00, 0x9b, 0x59, 0x44, 0x47, 0x26,
  0xa8, 0x10, 0x63, 0xfb, 0xf4, 0x8c, 0x27, 0xd6, 0x6e, 0x63, 0xa6, 0x78, 0x2c, 0x2c, 0x6d, 0xc3,
  0xe4, 0x91, 0xbd, 0x39, 0x78, 0xc6, 0x38, 0x6a, 0x9f, 0xa1, 0xad, 0x00, 0x64, 0xc2, 0xe2, 0xc8,
  0x47, 0x61, 0x71, 0xb4, 0x7b, 0x42, 0xe4, 0x76, 0x37, 0xf0, 0x69, 0x5d, 0xdf, 0x50, 0xcd, 0xbc,
  0x02, 0x41, 0x24, 0x03, 0x2f, 0x28, 0x73, 0xaa, 0x32, 0xc4, 0x70, 0xbd, 0x06, 0x30, 0x13, 0x67,
  0xd4, 0x4e, 0x9e, 0xce, 0xe0, 0xd7, 0x09, 0x18, 0x79, 0x51, 0xd0, 0x23, 0x4c, 0x9e, 0x64, 0x5d,
  0xca, 0x98, 0x1f, 0x22, 0x57, 0x51, 0xfb, 0x51, 0xdd, 0xc6, 0xd5, 0x68, 0xf8, 0x33, 0xfa, 0x90,
  0x0f, 0x77, 0xde, 0x1d, 0x69, 0xce, 0xce, 0xfd, 0x5b, 0x05, 0xea, 0x9a, 0xe8, 0x82, 0xd7, 0x9c,
  0x56, 0xb3, 0x02, 0x51, 0x22, 0x39, 0x03, 0x43, 0x89, 0xd0, 0xff, 0x02, 0x81, 0x80, 0x13, 0x1c,
  0x89, 0xc2, 0xb5, 0xde, 0x7e, 0xa5, 0xf4, 0x1c, 0xa8, 0x8d, 0xb3, 0x4f, 0x8a, 0x38, 0x9b, 0x57,
  0x33, 0xd6, 0x5d, 0xf2, 0xf1, 0x91, 0x05, 0x6e, 0x8b, 0x3a, 0xf7, 0x0b, 0xc8, 0x70, 0xa3, 0x0f,
  0x53, 0x4a, 0x1d, 0x89, 0x8f, 0x3f, 0xc9, 0xf9, 0xbf, 0x66, 0xc3, 0xf8, 0x1b, 0xf3, 0x6a, 0x69,
  0xc5, 0x1b, 0x1f, 0x3c, 0x94, 0xcf, 0xe3, 0xba, 0xed, 0xb6, 0x99, 0x48, 0x82, 0x13, 0x25, 0x86,
  0x5a, 0x15, 0xb1, 0xb1, 0x23, 0xb0, 0x84, 0x29, 0x57, 0x9e, 0xba, 0xa0, 0xa8, 0x76, 0xca, 0x9e,
  0xf1, 0xbc, 0xb6, 0xaf, 0xd0, 0x2a, 0x3a, 0xd8, 0xea, 0xc8, 0x5a, 0x9e, 0x32, 0x15, 0x4c, 0x88,
  0x1c, 0x12, 0x11, 0x72, 0x6c, 0x8b, 0xf9, 0xf9, 0x35, 0xf6, 0x42, 0x17, 0xf3, 0x95, 0xdf, 0xbd,
  0xc9, 0x55, 0x4f, 0x30, 0xba, 0xf8, 0xf6, 0xad, 0xb2, 0xfd, 0xbb, 0x36, 0x42, 0xe9, 0x02, 0x81,
  0x81, 0x00, 0xad, 0xf0, 0xc0, 0xfc, 0x55, 0x47, 0x8a, 0x03, 0x2b, 0x5c, 0x1c, 0x6e, 0xef, 0xf6,
  0x96, 0x68, 0xee, 0xa8, 0xd0, 0x6d, 0x70, 0x4f, 0x7f, 0x3e, 0x17, 0x2b, 0xfd, 0x7e, 0x22, 0x8c,
  0xea, 0x25, 0xe3, 0xbb, 0xa4, 0xa1, 0x57, 0xe7, 0x3e, 0xc0, 0x47, 0xf8, 0x7b, 0xa6, 0xd2, 0x48,
  0x68, 0xc0, 0x8a, 0xe0, 0xb2, 0x6b, 0x5d, 0xf9, 0x32, 0x6e, 0x70, 0x5a, 0xb9, 0x77, 0xd9, 0xbf,
  0x6d, 0xea, 0x53, 0xe2, 0x4f, 0xa8, 0x4c, 0x1c, 0xfa, 0x69, 0x49, 0x26, 0x48, 0x8a, 0xc5, 0x92,
  0x77, 0x6b, 0x7a, 0x89, 0xc3, 0xef, 0x6d, 0x1c, 0x44, 0x10, 0xe6, 0xaf, 0x47, 0x18, 0x9f, 0x99,
  0x09, 0xb4, 0x3b, 0x63, 0xf7, 0xbf, 0xe4, 0xe7, 0xe5, 0x98, 0xe2, 0x57, 0x85, 0xbb, 0x78, 0xb5,
  0xd1, 0xc3, 0x64, 0x8d, 0x4d, 0x4f, 0x02, 0xdb, 0x2c, 0x51, 0x58, 0xa3, 0xc7, 0x35, 0xf1, 0x2d,
  0x7a, 0x0a
};

static const  char* PRIVATE_KEY = "\
MIICdwIBADANBgkqhkiG9w0BAQEFAASCAmEwggJdAgEAAoGBAMLY2w1PmsuZNvZ4\
rJs1pESLrxF1Xlk9Zg4Sc0r2HIEn/eme8f7cOxXq8OtxIjowEfjceHGvfc7YG1Nw\
LDh+ka4Jh6QtYqPEL9GHfrBeufynd0g2PAPVXySBvOJr/Isk+4/Fsj5ihrIPgrQ5\
wTBBuLYjDgwPppC/+vddsr5wu5bbAgMBAAECgYBYmRLB8riIa5q6aBTUXofbQ0jP\
v3avTWPicjFKnK5JbE3gtQ2Evc+AH9x8smzF2KXTayy5RPsH2uxR/GefKK5EkWbB\
mLwWDJ5/QPlLK1STxPs8B/89mp8sZkZ1AxnSHhV/a3dRcK1rVamVcqPMdFyM5PfX\
/apL3MlL6bsq2FipAQJBAOp7EJuEs/qAjh8hgyV2acLdsokUEwXH4gCK6+KQW8XS\
xFWAG4IbbLfq1HwEpHC2hJSzifCQGoPAxYBRgSK+h6sCQQDUuqF04o06+Qpe4A/W\
pWCBGE33+CD4lBtaeoIagsAs/lgcFmXiJZ4+4PhyIORmwFgql9ZDFHSpl8rAYsfk\
dz2RAkEAtUKpFe/BybYzJ3Galg0xuMf0ye7QvblExjKeIqiBqS1DRO0hVrSomIxZ\
8f0MuWz+lI0t5t8fABa3FnjrINa0vQJBAJeZKNaTXPJZ5/oU0zS0RkG5gFbmjRiY\
86VXCMC7zRhDaacajyDKjithR6yNpDdVe39fFWJYgYsakXLo8mruTwECQGqywoy9\
epf1flKx4YCCrw+qRKmbkcXWcpFV32EG2K2D1GsxkuXv/b3qO67Uxx1Arxp9o8dl\
k34WfzApRjNjho0=";

static const  char* PUBLIC_KEY = "\
MIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQDC2NsNT5rLmTb2eKybNaREi68R\
dV5ZPWYOEnNK9hyBJ/3pnvH+3DsV6vDrcSI6MBH43Hhxr33O2BtTcCw4fpGuCYek\
LWKjxC/Rh36wXrn8p3dINjwD1V8kgbzia/yLJPuPxbI+YoayD4K0OcEwQbi2Iw4M\
D6aQv/r3XbK+cLuW2wIDAQAB";

void hexdump(FILE *f,               
    const char *title,                
    const unsigned char *s,               
    int l);

namespace pki {

/**
 * A Producer manages content keys used to encrypt a data packet in the
 * group-based encryption protocol.
 * @note This class is an experimental feature. The API may change.
 */
class SecControler {
public:
  typedef func_lib::function<
    void(const std::vector<ptr_lib::shared_ptr<Data> >& keys)> OnEncryptedKeys;

  /**
   * Create a Producer to use the given ProducerDb, Face and other values.
   *
   * A producer can produce data with a naming convention:
   *   /{prefix}/SAMPLE/{dataType}/[timestamp]
   *
   * The produced data packet is encrypted with a content key,
   * which is stored in the ProducerDb database.
   *
   * A producer also needs to produce data containing a content key
   * encrypted with E-KEYs. A producer can retrieve E-KEYs through the face,
   * and will re-try for at most repeatAttemps times when E-KEY retrieval fails.
   * @param prefix The producer name prefix. This makes a copy of the Name.
   * @param dataType The dataType portion of the producer name. This makes a
   * copy of the Name.
   * @param face The face used to retrieve keys. This is only a pointer to a
   * Face object which must remain valid for the life of this Producer.
   * @param keyChain The keyChain used to sign data packets. This is only a
   * pointer to a KeyChain object which must remain valid for the life of this
   * Producer.
   * @param database The ProducerDb database for storing keys.
   * @param repeatAttempts (optional) The maximum retry for retrieving keys. If
   * omitted, use 3.
   * @param keyRetrievalLink (optional) The Link object to use in Interests for
   * key retrieval. This makes a copy of the Link object. If the Link object's
   * getDelegations().size() is zero, don't use it. If omitted, don't use a Link
   * object.
   */
   /*
  Producer
    (const Name& prefix, const Name& dataType, Face* face, KeyChain* keyChain,
     const ptr_lib::shared_ptr<ProducerDb>& database, int repeatAttempts = 3,
     const Link& keyRetrievalLink = getNO_LINK())
  : impl_(new Impl
      (prefix, dataType, face, keyChain, database, repeatAttempts,
       keyRetrievalLink))
  {
  }
*/
      SecControler(const Name& prefix, const Name& suffix,ptr_lib::shared_ptr<ProducerDb> database,string databaseFilePath);
      
  
      ~SecControler();
     
  
      Name 
      addFixedContentKey(Name &contentKeyName);
      
      void 
      onRegisterInterest(const ptr_lib::shared_ptr<const Name>& prefix,
      const ptr_lib::shared_ptr<const Interest>& interest, Face& face,
      uint64_t interestFilterId,
      const ptr_lib::shared_ptr<const InterestFilter>& filter);
  
      void 
      onRegisterFailed(const ptr_lib::shared_ptr<const Name>& prefix);
  
      void 
      onContentInterest
      (const ptr_lib::shared_ptr<const Name>& prefix,
      const ptr_lib::shared_ptr<const Interest>& interest, Face& face,
      uint64_t interestFilterId,
      const ptr_lib::shared_ptr<const InterestFilter>& filter);
  
      void 
      onContentFailed(const ptr_lib::shared_ptr<const Name>& prefix);
  
      void
      onCkeyRequestInterest(const ptr_lib::shared_ptr<const Name>& prefix,
         const ptr_lib::shared_ptr<const Interest>& interest, Face& face, 
         uint64_t interestFilterId,
         const ptr_lib::shared_ptr<const InterestFilter>& filter);
  
      void 
      onCkeyRequestFailed(const ptr_lib::shared_ptr<const Name>& prefix);
  
      bool
      encryptContentKey
        (Data& data,const Blob& encryptionKey, const Name& eKeyName,
         MillisecondsSince1970 timeSlot, const EncryptError::OnError& onError);
  
      void 
      onEkeyData(const ptr_lib::shared_ptr<const Interest>& interest, const ptr_lib::shared_ptr<Data>& data);
  
      void 
      onEkeyTimeout(const ptr_lib::shared_ptr<const Interest>& interest);
      void 
      getEkey(Name keyName);
  
  
      void
      registerConsumer(Name  prefix);
      
      void 
      onReadyInterest
      (const ptr_lib::shared_ptr<const Name>& prefix,
      const ptr_lib::shared_ptr<const Interest>& interest, Face& face,
      uint64_t interestFilterId,
      const ptr_lib::shared_ptr<const InterestFilter>& filter);
      
      void 
      onReadyFailed(const ptr_lib::shared_ptr<const Name>& prefix);
  
      
      void
      readyForConsume(Name  prefix);
  
      void 
      produceSecureContent(Name &contentPrefix);
      
      
  public:
      Face *mainFace_;

      //Face *ekeyFace_;
      Face getEkeyFace_;
      KeyChain * keyChain_;
      Name prefix_;
      Name suffix_;
      string databaseFilePath_;
      ptr_lib::shared_ptr<ProducerDb> database_;
      Data secureData_;
      int registerCount_;
      int contentCount_;
      bool eKeyGeted_;

  /**
   * Create the content key corresponding to the timeSlot. This first checks if
   * the content key exists. For an existing content key, this returns the
   * content key name directly. If the key does not exist, this creates one and
   * encrypts it using the corresponding E-KEYs. The encrypted content keys are
   * passed to the onEncryptedKeys callback.
   * @param timeSlot The time slot as milliseconds since Jan 1, 1970 UTC.
   * @param onEncryptedKeys If this creates a content key, then this calls
   * onEncryptedKeys(keys) where keys is a list of encrypted content key Data
   * packets. If onEncryptedKeys is an empty OnEncryptedKeys(), this does not
   * use it.
   * NOTE: The library will log any exceptions thrown by this callback, but for
   * better error handling the callback should catch and properly handle any
   * exceptions.
   * @param onError (optional) This calls onError(errorCode, message) for an
   * error. If omitted, use a default callback which does nothing.
   * NOTE: The library will log any exceptions thrown by this callback, but for
   * better error handling the callback should catch and properly handle any
   * exceptions.
   * @return The content key name.
   */
  Name
  createContentKey
    (MillisecondsSince1970 timeSlot, const OnEncryptedKeys& onEncryptedKeys,
     const EncryptError::OnError& onError = defaultOnError)
  {
    return impl_->createContentKey(timeSlot,  onError);
  }

  Name
  createEncryptContentKey
    (MillisecondsSince1970 timeSlot, const OnEncryptedKeys& onEncryptedKeys,
     const EncryptError::OnError& onError = defaultOnError)
  {
    return impl_->createEncryptContentKey(timeSlot, onEncryptedKeys, onError);
  }

  /**
   * Encrypt the given content with the content key that covers timeSlot, and
   * update the data packet with the encrypted content and an appropriate data
   * name.
   * @param data An empty Data object which is updated.
   * @param timeSlot The time slot as milliseconds since Jan 1, 1970 UTC.
   * @param content The content to encrypt.
   * @param onError (optional) This calls onError(errorCode, message) for an
   * error. If omitted, use a default callback which does nothing.
   * NOTE: The library will log any exceptions thrown by this callback, but for
   * better error handling the callback should catch and properly handle any
   * exceptions.
   */
  void
  produce
    (Data& data, MillisecondsSince1970 timeSlot, const Blob& content,
     const EncryptError::OnError& onError = defaultOnError)
  {
    impl_->produce(data, timeSlot, content, onError);
  }

  /**
   * The default OnError callback which does nothing.
   */
  static void
  defaultOnError(EncryptError::ErrorCode errorCode, const std::string& message);

private:
  /**
   * Producer::Impl does the work of Producer. It is a separate class so that
   * Producer can create an instance in a shared_ptr to use in callbacks.
   */
  class Impl : public ptr_lib::enable_shared_from_this<Impl> {
  public:
    /**
     * Create a new Impl, which should belong to a shared_ptr. See the Producer
     * constructor for parameter documentation.
     */
    Impl
      (const Name& prefix, const Name& dataType, Face* face, KeyChain* keyChain,
       const ptr_lib::shared_ptr<ProducerDb>& database, int repeatAttempts,
       const Link& keyRetrievalLink);

    Name
    createContentKey
      (MillisecondsSince1970 timeSlot, 
       const EncryptError::OnError& onError);


    Name
    createEncryptContentKey
      (MillisecondsSince1970 timeSlot, const OnEncryptedKeys& onEncryptedKeys,
       const EncryptError::OnError& onError);

    void
    produce
      (Data& data, MillisecondsSince1970 timeSlot, const Blob& content,
       const EncryptError::OnError& onError);

  private:
    class KeyInfo {
    public:
      KeyInfo() : beginTimeSlot(0), endTimeSlot(0) {}

      MillisecondsSince1970 beginTimeSlot;
      MillisecondsSince1970 endTimeSlot;
      Blob keyBits;
    };

    class KeyRequest {
    public:
      KeyRequest(int interests)
      {
        interestCount = interests;
      }

      int interestCount;
      std::map<Name, int> repeatAttempts;
      std::vector<ptr_lib::shared_ptr<Data> > encryptedKeys;
    };

    /**
     * Round timeSlot to the nearest whole hour, so that we can store content
     * keys uniformly (by start of the hour).
     * @param timeSlot The time slot as milliseconds since Jan 1, 1970 UTC.
     * @return The start of the hour as milliseconds since Jan 1, 1970 UTC.
     */
    static MillisecondsSince1970
    getRoundedTimeSlot(MillisecondsSince1970 timeSlot);

    /**
     * Send an interest with the given name through the face with callbacks to
     * handleCoveringKey, handleTimeout and handleNetworkNack.
     * @param interest The interest to send.
     * @param timeSlot The time slot, passed to handleCoveringKey, handleTimeout
     * and handleNetworkNack.
     * @param onEncryptedKeys The OnEncryptedKeys callback, passed to
     * handleCoveringKey, handleTimeout and handleNetworkNack.
     */
    void
    sendKeyInterest
      (const Interest& interest, MillisecondsSince1970 timeSlot,
       const OnEncryptedKeys& onEncryptedKeys,
       const EncryptError::OnError& onError);

    /**
     * This is called from an expressInterest timeout to update the state of
     * keyRequest. Re-express the interest if the number of retrials is less
     * than the max limit.
     * @param interest The timed-out interest.
     * @param timeSlot The time slot as milliseconds since Jan 1, 1970 UTC.
     * @param onEncryptedKeys When there are no more interests to process, this
     * calls onEncryptedKeys(keys) where keys is a list of encrypted content key
     * Data packets. If onEncryptedKeys is an empty OnEncryptedKeys(), this does
     * not use it.
     */
    void
    handleTimeout
      (const ptr_lib::shared_ptr<const Interest>& interest,
       MillisecondsSince1970 timeSlot, const OnEncryptedKeys& onEncryptedKeys,
       const EncryptError::OnError& onError);

    /**
     * This is called from an expressInterest OnNetworkNack to handle a network
     * Nack for the E-KEY requested through the Interest. Decrease the 
     * outstanding E-KEY interest count for the C-KEY corresponding to the
     * timeSlot.
     * @param interest The interest given to expressInterest.
     * @param networkNack The returned NetworkNack (unused).
     * @param timeSlot The time slot as milliseconds since Jan 1, 1970 UTC.
     * @param onEncryptedKeys When there are no more interests to process, this
     * calls onEncryptedKeys(keys) where keys is a list of encrypted content key
     * Data packets. If onEncryptedKeys is an empty OnEncryptedKeys(), this does
     * not use it.
     */
    void
    handleNetworkNack
      (const ptr_lib::shared_ptr<const Interest>& interest,
       const ptr_lib::shared_ptr<NetworkNack>& networkNack,
       MillisecondsSince1970 timeSlot,
       const OnEncryptedKeys& onEncryptedKeys,
       const EncryptError::OnError& onError);

    /**
     * Decrease the count of outstanding E-KEY interests for the C-KEY for
     * timeCount. If the count decreases to 0, invoke onEncryptedKeys.
     * @param keyRequest The KeyRequest with the interestCount to update.
     * @param timeCount The time count for indexing keyRequests_.
     * @param onEncryptedKeys When there are no more interests to process, this
     * calls onEncryptedKeys(keys) where keys is a list of encrypted content key
     * Data packets. If onEncryptedKeys is an empty OnEncryptedKeys(), this does
     * not use it.
     */
    void
    updateKeyRequest
      (const ptr_lib::shared_ptr<KeyRequest>& keyRequest,
       MillisecondsSince1970 timeCount, const OnEncryptedKeys& onEncryptedKeys);

    /**
     * This is called from an expressInterest OnData to check that the
     * encryption key contained in data fits the timeSlot. This sends a refined
     * interest if required.
     * @param interest The interest given to expressInterest.
     * @param data The fetched Data packet.
     * @param timeSlot The time slot as milliseconds since Jan 1, 1970 UTC.
     * @param onEncryptedKeys When there are no more interests to process, this
     * calls onEncryptedKeys(keys) where keys is a list of encrypted content key
     * Data packets. If onEncryptedKeys is an empty OnEncryptedKeys(), this does
     * not use it.
     */
    void
    handleCoveringKey
      (const ptr_lib::shared_ptr<const Interest>& interest,
       const ptr_lib::shared_ptr<Data>& data, MillisecondsSince1970 timeSlot,
       const OnEncryptedKeys& onEncryptedKeys,
       const EncryptError::OnError& onError);

    /**
     * Get the content key from the database_ and encrypt it for the timeSlot
     * using encryptionKey.
     * @param encryptionKey The encryption key value.
     * @param eKeyName The key name for the EncryptedContent.
     * @param timeSlot The time slot as milliseconds since Jan 1, 1970 UTC.
     * @param onEncryptedKeys When there are no more interests to process, this
     * calls onEncryptedKeys(keys) where keys is a list of encrypted content key 
     * Data packets. If onEncryptedKeys is an empty OnEncryptedKeys(), this does
     * not use it.
     * @return True if encryption succeeds, otherwise false.
     */
    bool
    encryptContentKey
      (const Blob& encryptionKey, const Name& eKeyName,
       MillisecondsSince1970 timeSlot, const OnEncryptedKeys& onEncryptedKeys,
       const EncryptError::OnError& onError);

    // TODO: Move this to be the main representation inside the Exclude object.
    class ExcludeEntry {
    public:
      ExcludeEntry(const Name::Component& component, bool anyFollowsComponent)
      : component_(component), anyFollowsComponent_(anyFollowsComponent)
      {
      }

      Name::Component component_;
      bool anyFollowsComponent_;
    };

    /**
     * Create a list of ExcludeEntry from the Exclude object.
     * @param exclude The Exclude object to read.
     * @param entries Clear and set to a list of ExcludeEntry.
     */
    static void
    getExcludeEntries(const Exclude& exclude, std::vector<ExcludeEntry>& entries);

    /**
     * Set the Exclude object from the list of ExcludeEntry.
     * @param exclude The Exclude object to update.
     * @param entries The list of ExcludeEntry.
     */
    static void
    setExcludeEntries(Exclude& exclude, const std::vector<ExcludeEntry>& entries);

    /**
     * Get the latest entry in the list whose component_ is less than or equal
     * to component.
     * @param entries The list of ExcludeEntry.
     * @param component The component to compare.
     * @return The index of the found entry, or -1 if not found.
     */
    static int
    findEntryBeforeOrAt
      (const std::vector<ExcludeEntry>& entries, 
       const Name::Component& component);

    /**
     * Exclude all components in the range beginning at "from".
     * @param exclude The Exclude object to update.
     * @param from The first component in the exclude range.
     */
    static void
    excludeAfter(Exclude& exclude, const Name::Component& from);

    /**
     * Exclude all components in the range ending at "to".
     * @param exclude The Exclude object to update.
     * @param to The last component in the exclude range.
     */
    static void
    excludeBefore(Exclude& exclude, const Name::Component& to)
    {
      excludeRange(exclude, Name::Component(), to);
    }

    /**
     * Exclude all components in the range beginning at "from" and ending at "to".
     * @param exclude The Exclude object to update.
     * @param from The first component in the exclude range.
     * @param to The last component in the exclude range.
     */
    static void
    excludeRange
      (Exclude& exclude, const Name::Component& from, const Name::Component& to);

    Face* face_;
    Name namespace_;
    KeyChain* keyChain_;
    std::map<Name, ptr_lib::shared_ptr<KeyInfo> > eKeyInfo_;
    std::map<MillisecondsSince1970, ptr_lib::shared_ptr<KeyRequest> > keyRequests_;
    ptr_lib::shared_ptr<ProducerDb> database_;
    int maxRepeatAttempts_;

    Link keyRetrievalLink_;

    static const int START_TIME_STAMP_INDEX = -2;
    static const int END_TIME_STAMP_INDEX = -1;
  };

  /**
   * Get the static NoLink object, creating it if needed. We do this explicitly
   * because some C++ environments don't handle static constructors well.
   * @return The static NoLink object.
   */
  static Link&
  getNO_LINK()
  {
    if (!noLink_)
      noLink_ = new Link();

    return *noLink_;
  }

  //ptr_lib::shared_ptr<Impl> impl_;
  Impl *impl_;
  
  static Link* noLink_;
};

}

#endif
