// Only compile if ndn-cpp-config.h defines NDN_CPP_HAVE_PROTOBUF = 1.
// This will disappear if someone runs protoc again, but then assume we have Protobuf.
#include <ndn-cpp/ndn-cpp-config.h>
#if NDN_CPP_HAVE_PROTOBUF

// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: face-query-filter.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "face-query-filter.pb.h"

// For backwards compatibility with systems that install an older Protobuf (e.g. Ubuntu 12.04)),
// include the older output from protoc so that the sample program compiles.
#if GOOGLE_PROTOBUF_VERSION < 2005000

#include <algorithm>

#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace ndn_message {

namespace {

const ::google::protobuf::Descriptor* FaceQueryFilterMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FaceQueryFilterMessage_reflection_ = NULL;
const ::google::protobuf::Descriptor* FaceQueryFilterMessage_FaceQueryFilter_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FaceQueryFilterMessage_FaceQueryFilter_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* FaceQueryFilterMessage_FaceScope_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* FaceQueryFilterMessage_FacePersistency_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* FaceQueryFilterMessage_LinkType_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_face_2dquery_2dfilter_2eproto() {
  protobuf_AddDesc_face_2dquery_2dfilter_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "face-query-filter.proto");
  GOOGLE_CHECK(file != NULL);
  FaceQueryFilterMessage_descriptor_ = file->message_type(0);
  static const int FaceQueryFilterMessage_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FaceQueryFilterMessage, face_query_filter_),
  };
  FaceQueryFilterMessage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FaceQueryFilterMessage_descriptor_,
      FaceQueryFilterMessage::default_instance_,
      FaceQueryFilterMessage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FaceQueryFilterMessage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FaceQueryFilterMessage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FaceQueryFilterMessage));
  FaceQueryFilterMessage_FaceQueryFilter_descriptor_ = FaceQueryFilterMessage_descriptor_->nested_type(0);
  static const int FaceQueryFilterMessage_FaceQueryFilter_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FaceQueryFilterMessage_FaceQueryFilter, face_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FaceQueryFilterMessage_FaceQueryFilter, uri_scheme_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FaceQueryFilterMessage_FaceQueryFilter, uri_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FaceQueryFilterMessage_FaceQueryFilter, local_uri_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FaceQueryFilterMessage_FaceQueryFilter, face_scope_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FaceQueryFilterMessage_FaceQueryFilter, face_persistency_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FaceQueryFilterMessage_FaceQueryFilter, link_type_),
  };
  FaceQueryFilterMessage_FaceQueryFilter_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FaceQueryFilterMessage_FaceQueryFilter_descriptor_,
      FaceQueryFilterMessage_FaceQueryFilter::default_instance_,
      FaceQueryFilterMessage_FaceQueryFilter_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FaceQueryFilterMessage_FaceQueryFilter, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FaceQueryFilterMessage_FaceQueryFilter, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FaceQueryFilterMessage_FaceQueryFilter));
  FaceQueryFilterMessage_FaceScope_descriptor_ = FaceQueryFilterMessage_descriptor_->enum_type(0);
  FaceQueryFilterMessage_FacePersistency_descriptor_ = FaceQueryFilterMessage_descriptor_->enum_type(1);
  FaceQueryFilterMessage_LinkType_descriptor_ = FaceQueryFilterMessage_descriptor_->enum_type(2);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_face_2dquery_2dfilter_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FaceQueryFilterMessage_descriptor_, &FaceQueryFilterMessage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FaceQueryFilterMessage_FaceQueryFilter_descriptor_, &FaceQueryFilterMessage_FaceQueryFilter::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_face_2dquery_2dfilter_2eproto() {
  delete FaceQueryFilterMessage::default_instance_;
  delete FaceQueryFilterMessage_reflection_;
  delete FaceQueryFilterMessage_FaceQueryFilter::default_instance_;
  delete FaceQueryFilterMessage_FaceQueryFilter_reflection_;
}

void protobuf_AddDesc_face_2dquery_2dfilter_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\027face-query-filter.proto\022\013ndn_message\"\264"
    "\004\n\026FaceQueryFilterMessage\022O\n\021face_query_"
    "filter\030\226\001 \003(\01323.ndn_message.FaceQueryFil"
    "terMessage.FaceQueryFilter\032\256\002\n\017FaceQuery"
    "Filter\022\017\n\007face_id\030i \001(\004\022\023\n\nuri_scheme\030\203\001"
    " \001(\t\022\013\n\003uri\030r \001(\t\022\022\n\tlocal_uri\030\201\001 \001(\t\022B\n"
    "\nface_scope\030\204\001 \001(\0162-.ndn_message.FaceQue"
    "ryFilterMessage.FaceScope\022N\n\020face_persis"
    "tency\030\205\001 \001(\01623.ndn_message.FaceQueryFilt"
    "erMessage.FacePersistency\022@\n\tlink_type\030\206"
    "\001 \001(\0162,.ndn_message.FaceQueryFilterMessa"
    "ge.LinkType\"%\n\tFaceScope\022\r\n\tNON_LOCAL\020\000\022"
    "\t\n\005LOCAL\020\001\"\?\n\017FacePersistency\022\016\n\nPERSIST"
    "ENT\020\000\022\r\n\tON_DEMAND\020\001\022\r\n\tPERMANENT\020\002\"0\n\010L"
    "inkType\022\022\n\016POINT_TO_POINT\020\000\022\020\n\014MULTI_ACC"
    "ESS\020\001", 605);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "face-query-filter.proto", &protobuf_RegisterTypes);
  FaceQueryFilterMessage::default_instance_ = new FaceQueryFilterMessage();
  FaceQueryFilterMessage_FaceQueryFilter::default_instance_ = new FaceQueryFilterMessage_FaceQueryFilter();
  FaceQueryFilterMessage::default_instance_->InitAsDefaultInstance();
  FaceQueryFilterMessage_FaceQueryFilter::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_face_2dquery_2dfilter_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_face_2dquery_2dfilter_2eproto {
  StaticDescriptorInitializer_face_2dquery_2dfilter_2eproto() {
    protobuf_AddDesc_face_2dquery_2dfilter_2eproto();
  }
} static_descriptor_initializer_face_2dquery_2dfilter_2eproto_;


// ===================================================================

const ::google::protobuf::EnumDescriptor* FaceQueryFilterMessage_FaceScope_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FaceQueryFilterMessage_FaceScope_descriptor_;
}
bool FaceQueryFilterMessage_FaceScope_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const FaceQueryFilterMessage_FaceScope FaceQueryFilterMessage::NON_LOCAL;
const FaceQueryFilterMessage_FaceScope FaceQueryFilterMessage::LOCAL;
const FaceQueryFilterMessage_FaceScope FaceQueryFilterMessage::FaceScope_MIN;
const FaceQueryFilterMessage_FaceScope FaceQueryFilterMessage::FaceScope_MAX;
const int FaceQueryFilterMessage::FaceScope_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* FaceQueryFilterMessage_FacePersistency_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FaceQueryFilterMessage_FacePersistency_descriptor_;
}
bool FaceQueryFilterMessage_FacePersistency_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const FaceQueryFilterMessage_FacePersistency FaceQueryFilterMessage::PERSISTENT;
const FaceQueryFilterMessage_FacePersistency FaceQueryFilterMessage::ON_DEMAND;
const FaceQueryFilterMessage_FacePersistency FaceQueryFilterMessage::PERMANENT;
const FaceQueryFilterMessage_FacePersistency FaceQueryFilterMessage::FacePersistency_MIN;
const FaceQueryFilterMessage_FacePersistency FaceQueryFilterMessage::FacePersistency_MAX;
const int FaceQueryFilterMessage::FacePersistency_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* FaceQueryFilterMessage_LinkType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FaceQueryFilterMessage_LinkType_descriptor_;
}
bool FaceQueryFilterMessage_LinkType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const FaceQueryFilterMessage_LinkType FaceQueryFilterMessage::POINT_TO_POINT;
const FaceQueryFilterMessage_LinkType FaceQueryFilterMessage::MULTI_ACCESS;
const FaceQueryFilterMessage_LinkType FaceQueryFilterMessage::LinkType_MIN;
const FaceQueryFilterMessage_LinkType FaceQueryFilterMessage::LinkType_MAX;
const int FaceQueryFilterMessage::LinkType_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int FaceQueryFilterMessage_FaceQueryFilter::kFaceIdFieldNumber;
const int FaceQueryFilterMessage_FaceQueryFilter::kUriSchemeFieldNumber;
const int FaceQueryFilterMessage_FaceQueryFilter::kUriFieldNumber;
const int FaceQueryFilterMessage_FaceQueryFilter::kLocalUriFieldNumber;
const int FaceQueryFilterMessage_FaceQueryFilter::kFaceScopeFieldNumber;
const int FaceQueryFilterMessage_FaceQueryFilter::kFacePersistencyFieldNumber;
const int FaceQueryFilterMessage_FaceQueryFilter::kLinkTypeFieldNumber;
#endif  // !_MSC_VER

FaceQueryFilterMessage_FaceQueryFilter::FaceQueryFilterMessage_FaceQueryFilter()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FaceQueryFilterMessage_FaceQueryFilter::InitAsDefaultInstance() {
}

FaceQueryFilterMessage_FaceQueryFilter::FaceQueryFilterMessage_FaceQueryFilter(const FaceQueryFilterMessage_FaceQueryFilter& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FaceQueryFilterMessage_FaceQueryFilter::SharedCtor() {
  _cached_size_ = 0;
  face_id_ = GOOGLE_ULONGLONG(0);
  uri_scheme_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  uri_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  local_uri_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  face_scope_ = 0;
  face_persistency_ = 0;
  link_type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FaceQueryFilterMessage_FaceQueryFilter::~FaceQueryFilterMessage_FaceQueryFilter() {
  SharedDtor();
}

void FaceQueryFilterMessage_FaceQueryFilter::SharedDtor() {
  if (uri_scheme_ != &::google::protobuf::internal::kEmptyString) {
    delete uri_scheme_;
  }
  if (uri_ != &::google::protobuf::internal::kEmptyString) {
    delete uri_;
  }
  if (local_uri_ != &::google::protobuf::internal::kEmptyString) {
    delete local_uri_;
  }
  if (this != default_instance_) {
  }
}

void FaceQueryFilterMessage_FaceQueryFilter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FaceQueryFilterMessage_FaceQueryFilter::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FaceQueryFilterMessage_FaceQueryFilter_descriptor_;
}

const FaceQueryFilterMessage_FaceQueryFilter& FaceQueryFilterMessage_FaceQueryFilter::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_face_2dquery_2dfilter_2eproto();  return *default_instance_;
}

FaceQueryFilterMessage_FaceQueryFilter* FaceQueryFilterMessage_FaceQueryFilter::default_instance_ = NULL;

FaceQueryFilterMessage_FaceQueryFilter* FaceQueryFilterMessage_FaceQueryFilter::New() const {
  return new FaceQueryFilterMessage_FaceQueryFilter;
}

void FaceQueryFilterMessage_FaceQueryFilter::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    face_id_ = GOOGLE_ULONGLONG(0);
    if (has_uri_scheme()) {
      if (uri_scheme_ != &::google::protobuf::internal::kEmptyString) {
        uri_scheme_->clear();
      }
    }
    if (has_uri()) {
      if (uri_ != &::google::protobuf::internal::kEmptyString) {
        uri_->clear();
      }
    }
    if (has_local_uri()) {
      if (local_uri_ != &::google::protobuf::internal::kEmptyString) {
        local_uri_->clear();
      }
    }
    face_scope_ = 0;
    face_persistency_ = 0;
    link_type_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FaceQueryFilterMessage_FaceQueryFilter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 face_id = 105;
      case 105: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &face_id_)));
          set_has_face_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(914)) goto parse_uri;
        break;
      }

      // optional string uri = 114;
      case 114: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_uri:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_uri()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->uri().data(), this->uri().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(1034)) goto parse_local_uri;
        break;
      }

      // optional string local_uri = 129;
      case 129: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_local_uri:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_local_uri()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->local_uri().data(), this->local_uri().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(1050)) goto parse_uri_scheme;
        break;
      }

      // optional string uri_scheme = 131;
      case 131: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_uri_scheme:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_uri_scheme()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->uri_scheme().data(), this->uri_scheme().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(1056)) goto parse_face_scope;
        break;
      }

      // optional .ndn_message.FaceQueryFilterMessage.FaceScope face_scope = 132;
      case 132: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_face_scope:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::ndn_message::FaceQueryFilterMessage_FaceScope_IsValid(value)) {
            set_face_scope(static_cast< ::ndn_message::FaceQueryFilterMessage_FaceScope >(value));
          } else {
            mutable_unknown_fields()->AddVarint(132, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(1064)) goto parse_face_persistency;
        break;
      }

      // optional .ndn_message.FaceQueryFilterMessage.FacePersistency face_persistency = 133;
      case 133: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_face_persistency:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::ndn_message::FaceQueryFilterMessage_FacePersistency_IsValid(value)) {
            set_face_persistency(static_cast< ::ndn_message::FaceQueryFilterMessage_FacePersistency >(value));
          } else {
            mutable_unknown_fields()->AddVarint(133, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(1072)) goto parse_link_type;
        break;
      }

      // optional .ndn_message.FaceQueryFilterMessage.LinkType link_type = 134;
      case 134: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_link_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::ndn_message::FaceQueryFilterMessage_LinkType_IsValid(value)) {
            set_link_type(static_cast< ::ndn_message::FaceQueryFilterMessage_LinkType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(134, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FaceQueryFilterMessage_FaceQueryFilter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 face_id = 105;
  if (has_face_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(105, this->face_id(), output);
  }

  // optional string uri = 114;
  if (has_uri()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->uri().data(), this->uri().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      114, this->uri(), output);
  }

  // optional string local_uri = 129;
  if (has_local_uri()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->local_uri().data(), this->local_uri().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      129, this->local_uri(), output);
  }

  // optional string uri_scheme = 131;
  if (has_uri_scheme()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->uri_scheme().data(), this->uri_scheme().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      131, this->uri_scheme(), output);
  }

  // optional .ndn_message.FaceQueryFilterMessage.FaceScope face_scope = 132;
  if (has_face_scope()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      132, this->face_scope(), output);
  }

  // optional .ndn_message.FaceQueryFilterMessage.FacePersistency face_persistency = 133;
  if (has_face_persistency()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      133, this->face_persistency(), output);
  }

  // optional .ndn_message.FaceQueryFilterMessage.LinkType link_type = 134;
  if (has_link_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      134, this->link_type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FaceQueryFilterMessage_FaceQueryFilter::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 face_id = 105;
  if (has_face_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(105, this->face_id(), target);
  }

  // optional string uri = 114;
  if (has_uri()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->uri().data(), this->uri().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        114, this->uri(), target);
  }

  // optional string local_uri = 129;
  if (has_local_uri()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->local_uri().data(), this->local_uri().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        129, this->local_uri(), target);
  }

  // optional string uri_scheme = 131;
  if (has_uri_scheme()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->uri_scheme().data(), this->uri_scheme().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        131, this->uri_scheme(), target);
  }

  // optional .ndn_message.FaceQueryFilterMessage.FaceScope face_scope = 132;
  if (has_face_scope()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      132, this->face_scope(), target);
  }

  // optional .ndn_message.FaceQueryFilterMessage.FacePersistency face_persistency = 133;
  if (has_face_persistency()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      133, this->face_persistency(), target);
  }

  // optional .ndn_message.FaceQueryFilterMessage.LinkType link_type = 134;
  if (has_link_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      134, this->link_type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FaceQueryFilterMessage_FaceQueryFilter::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 face_id = 105;
    if (has_face_id()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->face_id());
    }

    // optional string uri_scheme = 131;
    if (has_uri_scheme()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->uri_scheme());
    }

    // optional string uri = 114;
    if (has_uri()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->uri());
    }

    // optional string local_uri = 129;
    if (has_local_uri()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->local_uri());
    }

    // optional .ndn_message.FaceQueryFilterMessage.FaceScope face_scope = 132;
    if (has_face_scope()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->face_scope());
    }

    // optional .ndn_message.FaceQueryFilterMessage.FacePersistency face_persistency = 133;
    if (has_face_persistency()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->face_persistency());
    }

    // optional .ndn_message.FaceQueryFilterMessage.LinkType link_type = 134;
    if (has_link_type()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->link_type());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FaceQueryFilterMessage_FaceQueryFilter::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FaceQueryFilterMessage_FaceQueryFilter* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FaceQueryFilterMessage_FaceQueryFilter*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FaceQueryFilterMessage_FaceQueryFilter::MergeFrom(const FaceQueryFilterMessage_FaceQueryFilter& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_face_id()) {
      set_face_id(from.face_id());
    }
    if (from.has_uri_scheme()) {
      set_uri_scheme(from.uri_scheme());
    }
    if (from.has_uri()) {
      set_uri(from.uri());
    }
    if (from.has_local_uri()) {
      set_local_uri(from.local_uri());
    }
    if (from.has_face_scope()) {
      set_face_scope(from.face_scope());
    }
    if (from.has_face_persistency()) {
      set_face_persistency(from.face_persistency());
    }
    if (from.has_link_type()) {
      set_link_type(from.link_type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FaceQueryFilterMessage_FaceQueryFilter::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FaceQueryFilterMessage_FaceQueryFilter::CopyFrom(const FaceQueryFilterMessage_FaceQueryFilter& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FaceQueryFilterMessage_FaceQueryFilter::IsInitialized() const {

  return true;
}

void FaceQueryFilterMessage_FaceQueryFilter::Swap(FaceQueryFilterMessage_FaceQueryFilter* other) {
  if (other != this) {
    std::swap(face_id_, other->face_id_);
    std::swap(uri_scheme_, other->uri_scheme_);
    std::swap(uri_, other->uri_);
    std::swap(local_uri_, other->local_uri_);
    std::swap(face_scope_, other->face_scope_);
    std::swap(face_persistency_, other->face_persistency_);
    std::swap(link_type_, other->link_type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FaceQueryFilterMessage_FaceQueryFilter::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FaceQueryFilterMessage_FaceQueryFilter_descriptor_;
  metadata.reflection = FaceQueryFilterMessage_FaceQueryFilter_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int FaceQueryFilterMessage::kFaceQueryFilterFieldNumber;
#endif  // !_MSC_VER

FaceQueryFilterMessage::FaceQueryFilterMessage()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FaceQueryFilterMessage::InitAsDefaultInstance() {
}

FaceQueryFilterMessage::FaceQueryFilterMessage(const FaceQueryFilterMessage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FaceQueryFilterMessage::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FaceQueryFilterMessage::~FaceQueryFilterMessage() {
  SharedDtor();
}

void FaceQueryFilterMessage::SharedDtor() {
  if (this != default_instance_) {
  }
}

void FaceQueryFilterMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FaceQueryFilterMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FaceQueryFilterMessage_descriptor_;
}

const FaceQueryFilterMessage& FaceQueryFilterMessage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_face_2dquery_2dfilter_2eproto();  return *default_instance_;
}

FaceQueryFilterMessage* FaceQueryFilterMessage::default_instance_ = NULL;

FaceQueryFilterMessage* FaceQueryFilterMessage::New() const {
  return new FaceQueryFilterMessage;
}

void FaceQueryFilterMessage::Clear() {
  face_query_filter_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FaceQueryFilterMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .ndn_message.FaceQueryFilterMessage.FaceQueryFilter face_query_filter = 150;
      case 150: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_face_query_filter:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_face_query_filter()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(1202)) goto parse_face_query_filter;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FaceQueryFilterMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .ndn_message.FaceQueryFilterMessage.FaceQueryFilter face_query_filter = 150;
  for (int i = 0; i < this->face_query_filter_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      150, this->face_query_filter(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FaceQueryFilterMessage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .ndn_message.FaceQueryFilterMessage.FaceQueryFilter face_query_filter = 150;
  for (int i = 0; i < this->face_query_filter_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        150, this->face_query_filter(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FaceQueryFilterMessage::ByteSize() const {
  int total_size = 0;

  // repeated .ndn_message.FaceQueryFilterMessage.FaceQueryFilter face_query_filter = 150;
  total_size += 2 * this->face_query_filter_size();
  for (int i = 0; i < this->face_query_filter_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->face_query_filter(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FaceQueryFilterMessage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FaceQueryFilterMessage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FaceQueryFilterMessage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FaceQueryFilterMessage::MergeFrom(const FaceQueryFilterMessage& from) {
  GOOGLE_CHECK_NE(&from, this);
  face_query_filter_.MergeFrom(from.face_query_filter_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FaceQueryFilterMessage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FaceQueryFilterMessage::CopyFrom(const FaceQueryFilterMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FaceQueryFilterMessage::IsInitialized() const {

  return true;
}

void FaceQueryFilterMessage::Swap(FaceQueryFilterMessage* other) {
  if (other != this) {
    face_query_filter_.Swap(&other->face_query_filter_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FaceQueryFilterMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FaceQueryFilterMessage_descriptor_;
  metadata.reflection = FaceQueryFilterMessage_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace ndn_message

// @@protoc_insertion_point(global_scope)

#elif GOOGLE_PROTOBUF_VERSION < 2006000

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace ndn_message {

namespace {

const ::google::protobuf::Descriptor* FaceQueryFilterMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FaceQueryFilterMessage_reflection_ = NULL;
const ::google::protobuf::Descriptor* FaceQueryFilterMessage_FaceQueryFilter_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FaceQueryFilterMessage_FaceQueryFilter_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* FaceQueryFilterMessage_FaceScope_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* FaceQueryFilterMessage_FacePersistency_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* FaceQueryFilterMessage_LinkType_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_face_2dquery_2dfilter_2eproto() {
  protobuf_AddDesc_face_2dquery_2dfilter_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "face-query-filter.proto");
  GOOGLE_CHECK(file != NULL);
  FaceQueryFilterMessage_descriptor_ = file->message_type(0);
  static const int FaceQueryFilterMessage_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FaceQueryFilterMessage, face_query_filter_),
  };
  FaceQueryFilterMessage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FaceQueryFilterMessage_descriptor_,
      FaceQueryFilterMessage::default_instance_,
      FaceQueryFilterMessage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FaceQueryFilterMessage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FaceQueryFilterMessage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FaceQueryFilterMessage));
  FaceQueryFilterMessage_FaceQueryFilter_descriptor_ = FaceQueryFilterMessage_descriptor_->nested_type(0);
  static const int FaceQueryFilterMessage_FaceQueryFilter_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FaceQueryFilterMessage_FaceQueryFilter, face_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FaceQueryFilterMessage_FaceQueryFilter, uri_scheme_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FaceQueryFilterMessage_FaceQueryFilter, uri_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FaceQueryFilterMessage_FaceQueryFilter, local_uri_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FaceQueryFilterMessage_FaceQueryFilter, face_scope_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FaceQueryFilterMessage_FaceQueryFilter, face_persistency_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FaceQueryFilterMessage_FaceQueryFilter, link_type_),
  };
  FaceQueryFilterMessage_FaceQueryFilter_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FaceQueryFilterMessage_FaceQueryFilter_descriptor_,
      FaceQueryFilterMessage_FaceQueryFilter::default_instance_,
      FaceQueryFilterMessage_FaceQueryFilter_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FaceQueryFilterMessage_FaceQueryFilter, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FaceQueryFilterMessage_FaceQueryFilter, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FaceQueryFilterMessage_FaceQueryFilter));
  FaceQueryFilterMessage_FaceScope_descriptor_ = FaceQueryFilterMessage_descriptor_->enum_type(0);
  FaceQueryFilterMessage_FacePersistency_descriptor_ = FaceQueryFilterMessage_descriptor_->enum_type(1);
  FaceQueryFilterMessage_LinkType_descriptor_ = FaceQueryFilterMessage_descriptor_->enum_type(2);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_face_2dquery_2dfilter_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FaceQueryFilterMessage_descriptor_, &FaceQueryFilterMessage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FaceQueryFilterMessage_FaceQueryFilter_descriptor_, &FaceQueryFilterMessage_FaceQueryFilter::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_face_2dquery_2dfilter_2eproto() {
  delete FaceQueryFilterMessage::default_instance_;
  delete FaceQueryFilterMessage_reflection_;
  delete FaceQueryFilterMessage_FaceQueryFilter::default_instance_;
  delete FaceQueryFilterMessage_FaceQueryFilter_reflection_;
}

void protobuf_AddDesc_face_2dquery_2dfilter_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\027face-query-filter.proto\022\013ndn_message\"\264"
    "\004\n\026FaceQueryFilterMessage\022O\n\021face_query_"
    "filter\030\226\001 \003(\01323.ndn_message.FaceQueryFil"
    "terMessage.FaceQueryFilter\032\256\002\n\017FaceQuery"
    "Filter\022\017\n\007face_id\030i \001(\004\022\023\n\nuri_scheme\030\203\001"
    " \001(\t\022\013\n\003uri\030r \001(\t\022\022\n\tlocal_uri\030\201\001 \001(\t\022B\n"
    "\nface_scope\030\204\001 \001(\0162-.ndn_message.FaceQue"
    "ryFilterMessage.FaceScope\022N\n\020face_persis"
    "tency\030\205\001 \001(\01623.ndn_message.FaceQueryFilt"
    "erMessage.FacePersistency\022@\n\tlink_type\030\206"
    "\001 \001(\0162,.ndn_message.FaceQueryFilterMessa"
    "ge.LinkType\"%\n\tFaceScope\022\r\n\tNON_LOCAL\020\000\022"
    "\t\n\005LOCAL\020\001\"\?\n\017FacePersistency\022\016\n\nPERSIST"
    "ENT\020\000\022\r\n\tON_DEMAND\020\001\022\r\n\tPERMANENT\020\002\"0\n\010L"
    "inkType\022\022\n\016POINT_TO_POINT\020\000\022\020\n\014MULTI_ACC"
    "ESS\020\001", 605);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "face-query-filter.proto", &protobuf_RegisterTypes);
  FaceQueryFilterMessage::default_instance_ = new FaceQueryFilterMessage();
  FaceQueryFilterMessage_FaceQueryFilter::default_instance_ = new FaceQueryFilterMessage_FaceQueryFilter();
  FaceQueryFilterMessage::default_instance_->InitAsDefaultInstance();
  FaceQueryFilterMessage_FaceQueryFilter::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_face_2dquery_2dfilter_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_face_2dquery_2dfilter_2eproto {
  StaticDescriptorInitializer_face_2dquery_2dfilter_2eproto() {
    protobuf_AddDesc_face_2dquery_2dfilter_2eproto();
  }
} static_descriptor_initializer_face_2dquery_2dfilter_2eproto_;

// ===================================================================

const ::google::protobuf::EnumDescriptor* FaceQueryFilterMessage_FaceScope_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FaceQueryFilterMessage_FaceScope_descriptor_;
}
bool FaceQueryFilterMessage_FaceScope_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const FaceQueryFilterMessage_FaceScope FaceQueryFilterMessage::NON_LOCAL;
const FaceQueryFilterMessage_FaceScope FaceQueryFilterMessage::LOCAL;
const FaceQueryFilterMessage_FaceScope FaceQueryFilterMessage::FaceScope_MIN;
const FaceQueryFilterMessage_FaceScope FaceQueryFilterMessage::FaceScope_MAX;
const int FaceQueryFilterMessage::FaceScope_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* FaceQueryFilterMessage_FacePersistency_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FaceQueryFilterMessage_FacePersistency_descriptor_;
}
bool FaceQueryFilterMessage_FacePersistency_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const FaceQueryFilterMessage_FacePersistency FaceQueryFilterMessage::PERSISTENT;
const FaceQueryFilterMessage_FacePersistency FaceQueryFilterMessage::ON_DEMAND;
const FaceQueryFilterMessage_FacePersistency FaceQueryFilterMessage::PERMANENT;
const FaceQueryFilterMessage_FacePersistency FaceQueryFilterMessage::FacePersistency_MIN;
const FaceQueryFilterMessage_FacePersistency FaceQueryFilterMessage::FacePersistency_MAX;
const int FaceQueryFilterMessage::FacePersistency_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* FaceQueryFilterMessage_LinkType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FaceQueryFilterMessage_LinkType_descriptor_;
}
bool FaceQueryFilterMessage_LinkType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const FaceQueryFilterMessage_LinkType FaceQueryFilterMessage::POINT_TO_POINT;
const FaceQueryFilterMessage_LinkType FaceQueryFilterMessage::MULTI_ACCESS;
const FaceQueryFilterMessage_LinkType FaceQueryFilterMessage::LinkType_MIN;
const FaceQueryFilterMessage_LinkType FaceQueryFilterMessage::LinkType_MAX;
const int FaceQueryFilterMessage::LinkType_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int FaceQueryFilterMessage_FaceQueryFilter::kFaceIdFieldNumber;
const int FaceQueryFilterMessage_FaceQueryFilter::kUriSchemeFieldNumber;
const int FaceQueryFilterMessage_FaceQueryFilter::kUriFieldNumber;
const int FaceQueryFilterMessage_FaceQueryFilter::kLocalUriFieldNumber;
const int FaceQueryFilterMessage_FaceQueryFilter::kFaceScopeFieldNumber;
const int FaceQueryFilterMessage_FaceQueryFilter::kFacePersistencyFieldNumber;
const int FaceQueryFilterMessage_FaceQueryFilter::kLinkTypeFieldNumber;
#endif  // !_MSC_VER

FaceQueryFilterMessage_FaceQueryFilter::FaceQueryFilterMessage_FaceQueryFilter()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FaceQueryFilterMessage_FaceQueryFilter::InitAsDefaultInstance() {
}

FaceQueryFilterMessage_FaceQueryFilter::FaceQueryFilterMessage_FaceQueryFilter(const FaceQueryFilterMessage_FaceQueryFilter& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FaceQueryFilterMessage_FaceQueryFilter::SharedCtor() {
  _cached_size_ = 0;
  face_id_ = GOOGLE_ULONGLONG(0);
  uri_scheme_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  uri_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  local_uri_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  face_scope_ = 0;
  face_persistency_ = 0;
  link_type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FaceQueryFilterMessage_FaceQueryFilter::~FaceQueryFilterMessage_FaceQueryFilter() {
  SharedDtor();
}

void FaceQueryFilterMessage_FaceQueryFilter::SharedDtor() {
  if (uri_scheme_ != &::google::protobuf::internal::kEmptyString) {
    delete uri_scheme_;
  }
  if (uri_ != &::google::protobuf::internal::kEmptyString) {
    delete uri_;
  }
  if (local_uri_ != &::google::protobuf::internal::kEmptyString) {
    delete local_uri_;
  }
  if (this != default_instance_) {
  }
}

void FaceQueryFilterMessage_FaceQueryFilter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FaceQueryFilterMessage_FaceQueryFilter::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FaceQueryFilterMessage_FaceQueryFilter_descriptor_;
}

const FaceQueryFilterMessage_FaceQueryFilter& FaceQueryFilterMessage_FaceQueryFilter::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_face_2dquery_2dfilter_2eproto();
  return *default_instance_;
}

FaceQueryFilterMessage_FaceQueryFilter* FaceQueryFilterMessage_FaceQueryFilter::default_instance_ = NULL;

FaceQueryFilterMessage_FaceQueryFilter* FaceQueryFilterMessage_FaceQueryFilter::New() const {
  return new FaceQueryFilterMessage_FaceQueryFilter;
}

void FaceQueryFilterMessage_FaceQueryFilter::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    face_id_ = GOOGLE_ULONGLONG(0);
    if (has_uri_scheme()) {
      if (uri_scheme_ != &::google::protobuf::internal::kEmptyString) {
        uri_scheme_->clear();
      }
    }
    if (has_uri()) {
      if (uri_ != &::google::protobuf::internal::kEmptyString) {
        uri_->clear();
      }
    }
    if (has_local_uri()) {
      if (local_uri_ != &::google::protobuf::internal::kEmptyString) {
        local_uri_->clear();
      }
    }
    face_scope_ = 0;
    face_persistency_ = 0;
    link_type_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FaceQueryFilterMessage_FaceQueryFilter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 face_id = 105;
      case 105: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &face_id_)));
          set_has_face_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(914)) goto parse_uri;
        break;
      }

      // optional string uri = 114;
      case 114: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_uri:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_uri()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->uri().data(), this->uri().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(1034)) goto parse_local_uri;
        break;
      }

      // optional string local_uri = 129;
      case 129: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_local_uri:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_local_uri()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->local_uri().data(), this->local_uri().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(1050)) goto parse_uri_scheme;
        break;
      }

      // optional string uri_scheme = 131;
      case 131: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_uri_scheme:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_uri_scheme()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->uri_scheme().data(), this->uri_scheme().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(1056)) goto parse_face_scope;
        break;
      }

      // optional .ndn_message.FaceQueryFilterMessage.FaceScope face_scope = 132;
      case 132: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_face_scope:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::ndn_message::FaceQueryFilterMessage_FaceScope_IsValid(value)) {
            set_face_scope(static_cast< ::ndn_message::FaceQueryFilterMessage_FaceScope >(value));
          } else {
            mutable_unknown_fields()->AddVarint(132, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(1064)) goto parse_face_persistency;
        break;
      }

      // optional .ndn_message.FaceQueryFilterMessage.FacePersistency face_persistency = 133;
      case 133: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_face_persistency:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::ndn_message::FaceQueryFilterMessage_FacePersistency_IsValid(value)) {
            set_face_persistency(static_cast< ::ndn_message::FaceQueryFilterMessage_FacePersistency >(value));
          } else {
            mutable_unknown_fields()->AddVarint(133, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(1072)) goto parse_link_type;
        break;
      }

      // optional .ndn_message.FaceQueryFilterMessage.LinkType link_type = 134;
      case 134: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_link_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::ndn_message::FaceQueryFilterMessage_LinkType_IsValid(value)) {
            set_link_type(static_cast< ::ndn_message::FaceQueryFilterMessage_LinkType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(134, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FaceQueryFilterMessage_FaceQueryFilter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 face_id = 105;
  if (has_face_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(105, this->face_id(), output);
  }

  // optional string uri = 114;
  if (has_uri()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->uri().data(), this->uri().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      114, this->uri(), output);
  }

  // optional string local_uri = 129;
  if (has_local_uri()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->local_uri().data(), this->local_uri().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      129, this->local_uri(), output);
  }

  // optional string uri_scheme = 131;
  if (has_uri_scheme()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->uri_scheme().data(), this->uri_scheme().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      131, this->uri_scheme(), output);
  }

  // optional .ndn_message.FaceQueryFilterMessage.FaceScope face_scope = 132;
  if (has_face_scope()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      132, this->face_scope(), output);
  }

  // optional .ndn_message.FaceQueryFilterMessage.FacePersistency face_persistency = 133;
  if (has_face_persistency()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      133, this->face_persistency(), output);
  }

  // optional .ndn_message.FaceQueryFilterMessage.LinkType link_type = 134;
  if (has_link_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      134, this->link_type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FaceQueryFilterMessage_FaceQueryFilter::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 face_id = 105;
  if (has_face_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(105, this->face_id(), target);
  }

  // optional string uri = 114;
  if (has_uri()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->uri().data(), this->uri().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        114, this->uri(), target);
  }

  // optional string local_uri = 129;
  if (has_local_uri()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->local_uri().data(), this->local_uri().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        129, this->local_uri(), target);
  }

  // optional string uri_scheme = 131;
  if (has_uri_scheme()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->uri_scheme().data(), this->uri_scheme().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        131, this->uri_scheme(), target);
  }

  // optional .ndn_message.FaceQueryFilterMessage.FaceScope face_scope = 132;
  if (has_face_scope()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      132, this->face_scope(), target);
  }

  // optional .ndn_message.FaceQueryFilterMessage.FacePersistency face_persistency = 133;
  if (has_face_persistency()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      133, this->face_persistency(), target);
  }

  // optional .ndn_message.FaceQueryFilterMessage.LinkType link_type = 134;
  if (has_link_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      134, this->link_type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FaceQueryFilterMessage_FaceQueryFilter::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 face_id = 105;
    if (has_face_id()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->face_id());
    }

    // optional string uri_scheme = 131;
    if (has_uri_scheme()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->uri_scheme());
    }

    // optional string uri = 114;
    if (has_uri()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->uri());
    }

    // optional string local_uri = 129;
    if (has_local_uri()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->local_uri());
    }

    // optional .ndn_message.FaceQueryFilterMessage.FaceScope face_scope = 132;
    if (has_face_scope()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->face_scope());
    }

    // optional .ndn_message.FaceQueryFilterMessage.FacePersistency face_persistency = 133;
    if (has_face_persistency()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->face_persistency());
    }

    // optional .ndn_message.FaceQueryFilterMessage.LinkType link_type = 134;
    if (has_link_type()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->link_type());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FaceQueryFilterMessage_FaceQueryFilter::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FaceQueryFilterMessage_FaceQueryFilter* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FaceQueryFilterMessage_FaceQueryFilter*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FaceQueryFilterMessage_FaceQueryFilter::MergeFrom(const FaceQueryFilterMessage_FaceQueryFilter& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_face_id()) {
      set_face_id(from.face_id());
    }
    if (from.has_uri_scheme()) {
      set_uri_scheme(from.uri_scheme());
    }
    if (from.has_uri()) {
      set_uri(from.uri());
    }
    if (from.has_local_uri()) {
      set_local_uri(from.local_uri());
    }
    if (from.has_face_scope()) {
      set_face_scope(from.face_scope());
    }
    if (from.has_face_persistency()) {
      set_face_persistency(from.face_persistency());
    }
    if (from.has_link_type()) {
      set_link_type(from.link_type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FaceQueryFilterMessage_FaceQueryFilter::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FaceQueryFilterMessage_FaceQueryFilter::CopyFrom(const FaceQueryFilterMessage_FaceQueryFilter& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FaceQueryFilterMessage_FaceQueryFilter::IsInitialized() const {

  return true;
}

void FaceQueryFilterMessage_FaceQueryFilter::Swap(FaceQueryFilterMessage_FaceQueryFilter* other) {
  if (other != this) {
    std::swap(face_id_, other->face_id_);
    std::swap(uri_scheme_, other->uri_scheme_);
    std::swap(uri_, other->uri_);
    std::swap(local_uri_, other->local_uri_);
    std::swap(face_scope_, other->face_scope_);
    std::swap(face_persistency_, other->face_persistency_);
    std::swap(link_type_, other->link_type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FaceQueryFilterMessage_FaceQueryFilter::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FaceQueryFilterMessage_FaceQueryFilter_descriptor_;
  metadata.reflection = FaceQueryFilterMessage_FaceQueryFilter_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int FaceQueryFilterMessage::kFaceQueryFilterFieldNumber;
#endif  // !_MSC_VER

FaceQueryFilterMessage::FaceQueryFilterMessage()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FaceQueryFilterMessage::InitAsDefaultInstance() {
}

FaceQueryFilterMessage::FaceQueryFilterMessage(const FaceQueryFilterMessage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FaceQueryFilterMessage::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FaceQueryFilterMessage::~FaceQueryFilterMessage() {
  SharedDtor();
}

void FaceQueryFilterMessage::SharedDtor() {
  if (this != default_instance_) {
  }
}

void FaceQueryFilterMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FaceQueryFilterMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FaceQueryFilterMessage_descriptor_;
}

const FaceQueryFilterMessage& FaceQueryFilterMessage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_face_2dquery_2dfilter_2eproto();
  return *default_instance_;
}

FaceQueryFilterMessage* FaceQueryFilterMessage::default_instance_ = NULL;

FaceQueryFilterMessage* FaceQueryFilterMessage::New() const {
  return new FaceQueryFilterMessage;
}

void FaceQueryFilterMessage::Clear() {
  face_query_filter_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FaceQueryFilterMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .ndn_message.FaceQueryFilterMessage.FaceQueryFilter face_query_filter = 150;
      case 150: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_face_query_filter:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_face_query_filter()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(1202)) goto parse_face_query_filter;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FaceQueryFilterMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .ndn_message.FaceQueryFilterMessage.FaceQueryFilter face_query_filter = 150;
  for (int i = 0; i < this->face_query_filter_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      150, this->face_query_filter(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FaceQueryFilterMessage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .ndn_message.FaceQueryFilterMessage.FaceQueryFilter face_query_filter = 150;
  for (int i = 0; i < this->face_query_filter_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        150, this->face_query_filter(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FaceQueryFilterMessage::ByteSize() const {
  int total_size = 0;

  // repeated .ndn_message.FaceQueryFilterMessage.FaceQueryFilter face_query_filter = 150;
  total_size += 2 * this->face_query_filter_size();
  for (int i = 0; i < this->face_query_filter_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->face_query_filter(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FaceQueryFilterMessage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FaceQueryFilterMessage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FaceQueryFilterMessage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FaceQueryFilterMessage::MergeFrom(const FaceQueryFilterMessage& from) {
  GOOGLE_CHECK_NE(&from, this);
  face_query_filter_.MergeFrom(from.face_query_filter_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FaceQueryFilterMessage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FaceQueryFilterMessage::CopyFrom(const FaceQueryFilterMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FaceQueryFilterMessage::IsInitialized() const {

  return true;
}

void FaceQueryFilterMessage::Swap(FaceQueryFilterMessage* other) {
  if (other != this) {
    face_query_filter_.Swap(&other->face_query_filter_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FaceQueryFilterMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FaceQueryFilterMessage_descriptor_;
  metadata.reflection = FaceQueryFilterMessage_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace ndn_message

// @@protoc_insertion_point(global_scope)

#elif GOOGLE_PROTOBUF_VERSION < 3000000

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace ndn_message {

namespace {

const ::google::protobuf::Descriptor* FaceQueryFilterMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FaceQueryFilterMessage_reflection_ = NULL;
const ::google::protobuf::Descriptor* FaceQueryFilterMessage_FaceQueryFilter_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FaceQueryFilterMessage_FaceQueryFilter_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* FaceQueryFilterMessage_FaceScope_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* FaceQueryFilterMessage_FacePersistency_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* FaceQueryFilterMessage_LinkType_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_face_2dquery_2dfilter_2eproto() {
  protobuf_AddDesc_face_2dquery_2dfilter_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "face-query-filter.proto");
  GOOGLE_CHECK(file != NULL);
  FaceQueryFilterMessage_descriptor_ = file->message_type(0);
  static const int FaceQueryFilterMessage_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FaceQueryFilterMessage, face_query_filter_),
  };
  FaceQueryFilterMessage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FaceQueryFilterMessage_descriptor_,
      FaceQueryFilterMessage::default_instance_,
      FaceQueryFilterMessage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FaceQueryFilterMessage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FaceQueryFilterMessage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FaceQueryFilterMessage));
  FaceQueryFilterMessage_FaceQueryFilter_descriptor_ = FaceQueryFilterMessage_descriptor_->nested_type(0);
  static const int FaceQueryFilterMessage_FaceQueryFilter_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FaceQueryFilterMessage_FaceQueryFilter, face_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FaceQueryFilterMessage_FaceQueryFilter, uri_scheme_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FaceQueryFilterMessage_FaceQueryFilter, uri_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FaceQueryFilterMessage_FaceQueryFilter, local_uri_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FaceQueryFilterMessage_FaceQueryFilter, face_scope_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FaceQueryFilterMessage_FaceQueryFilter, face_persistency_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FaceQueryFilterMessage_FaceQueryFilter, link_type_),
  };
  FaceQueryFilterMessage_FaceQueryFilter_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FaceQueryFilterMessage_FaceQueryFilter_descriptor_,
      FaceQueryFilterMessage_FaceQueryFilter::default_instance_,
      FaceQueryFilterMessage_FaceQueryFilter_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FaceQueryFilterMessage_FaceQueryFilter, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FaceQueryFilterMessage_FaceQueryFilter, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FaceQueryFilterMessage_FaceQueryFilter));
  FaceQueryFilterMessage_FaceScope_descriptor_ = FaceQueryFilterMessage_descriptor_->enum_type(0);
  FaceQueryFilterMessage_FacePersistency_descriptor_ = FaceQueryFilterMessage_descriptor_->enum_type(1);
  FaceQueryFilterMessage_LinkType_descriptor_ = FaceQueryFilterMessage_descriptor_->enum_type(2);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_face_2dquery_2dfilter_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FaceQueryFilterMessage_descriptor_, &FaceQueryFilterMessage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FaceQueryFilterMessage_FaceQueryFilter_descriptor_, &FaceQueryFilterMessage_FaceQueryFilter::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_face_2dquery_2dfilter_2eproto() {
  delete FaceQueryFilterMessage::default_instance_;
  delete FaceQueryFilterMessage_reflection_;
  delete FaceQueryFilterMessage_FaceQueryFilter::default_instance_;
  delete FaceQueryFilterMessage_FaceQueryFilter_reflection_;
}

void protobuf_AddDesc_face_2dquery_2dfilter_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\027face-query-filter.proto\022\013ndn_message\"\264"
    "\004\n\026FaceQueryFilterMessage\022O\n\021face_query_"
    "filter\030\226\001 \003(\01323.ndn_message.FaceQueryFil"
    "terMessage.FaceQueryFilter\032\256\002\n\017FaceQuery"
    "Filter\022\017\n\007face_id\030i \001(\004\022\023\n\nuri_scheme\030\203\001"
    " \001(\t\022\013\n\003uri\030r \001(\t\022\022\n\tlocal_uri\030\201\001 \001(\t\022B\n"
    "\nface_scope\030\204\001 \001(\0162-.ndn_message.FaceQue"
    "ryFilterMessage.FaceScope\022N\n\020face_persis"
    "tency\030\205\001 \001(\01623.ndn_message.FaceQueryFilt"
    "erMessage.FacePersistency\022@\n\tlink_type\030\206"
    "\001 \001(\0162,.ndn_message.FaceQueryFilterMessa"
    "ge.LinkType\"%\n\tFaceScope\022\r\n\tNON_LOCAL\020\000\022"
    "\t\n\005LOCAL\020\001\"\?\n\017FacePersistency\022\016\n\nPERSIST"
    "ENT\020\000\022\r\n\tON_DEMAND\020\001\022\r\n\tPERMANENT\020\002\"0\n\010L"
    "inkType\022\022\n\016POINT_TO_POINT\020\000\022\020\n\014MULTI_ACC"
    "ESS\020\001", 605);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "face-query-filter.proto", &protobuf_RegisterTypes);
  FaceQueryFilterMessage::default_instance_ = new FaceQueryFilterMessage();
  FaceQueryFilterMessage_FaceQueryFilter::default_instance_ = new FaceQueryFilterMessage_FaceQueryFilter();
  FaceQueryFilterMessage::default_instance_->InitAsDefaultInstance();
  FaceQueryFilterMessage_FaceQueryFilter::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_face_2dquery_2dfilter_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_face_2dquery_2dfilter_2eproto {
  StaticDescriptorInitializer_face_2dquery_2dfilter_2eproto() {
    protobuf_AddDesc_face_2dquery_2dfilter_2eproto();
  }
} static_descriptor_initializer_face_2dquery_2dfilter_2eproto_;

// ===================================================================

const ::google::protobuf::EnumDescriptor* FaceQueryFilterMessage_FaceScope_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FaceQueryFilterMessage_FaceScope_descriptor_;
}
bool FaceQueryFilterMessage_FaceScope_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const FaceQueryFilterMessage_FaceScope FaceQueryFilterMessage::NON_LOCAL;
const FaceQueryFilterMessage_FaceScope FaceQueryFilterMessage::LOCAL;
const FaceQueryFilterMessage_FaceScope FaceQueryFilterMessage::FaceScope_MIN;
const FaceQueryFilterMessage_FaceScope FaceQueryFilterMessage::FaceScope_MAX;
const int FaceQueryFilterMessage::FaceScope_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* FaceQueryFilterMessage_FacePersistency_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FaceQueryFilterMessage_FacePersistency_descriptor_;
}
bool FaceQueryFilterMessage_FacePersistency_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const FaceQueryFilterMessage_FacePersistency FaceQueryFilterMessage::PERSISTENT;
const FaceQueryFilterMessage_FacePersistency FaceQueryFilterMessage::ON_DEMAND;
const FaceQueryFilterMessage_FacePersistency FaceQueryFilterMessage::PERMANENT;
const FaceQueryFilterMessage_FacePersistency FaceQueryFilterMessage::FacePersistency_MIN;
const FaceQueryFilterMessage_FacePersistency FaceQueryFilterMessage::FacePersistency_MAX;
const int FaceQueryFilterMessage::FacePersistency_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* FaceQueryFilterMessage_LinkType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FaceQueryFilterMessage_LinkType_descriptor_;
}
bool FaceQueryFilterMessage_LinkType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const FaceQueryFilterMessage_LinkType FaceQueryFilterMessage::POINT_TO_POINT;
const FaceQueryFilterMessage_LinkType FaceQueryFilterMessage::MULTI_ACCESS;
const FaceQueryFilterMessage_LinkType FaceQueryFilterMessage::LinkType_MIN;
const FaceQueryFilterMessage_LinkType FaceQueryFilterMessage::LinkType_MAX;
const int FaceQueryFilterMessage::LinkType_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int FaceQueryFilterMessage_FaceQueryFilter::kFaceIdFieldNumber;
const int FaceQueryFilterMessage_FaceQueryFilter::kUriSchemeFieldNumber;
const int FaceQueryFilterMessage_FaceQueryFilter::kUriFieldNumber;
const int FaceQueryFilterMessage_FaceQueryFilter::kLocalUriFieldNumber;
const int FaceQueryFilterMessage_FaceQueryFilter::kFaceScopeFieldNumber;
const int FaceQueryFilterMessage_FaceQueryFilter::kFacePersistencyFieldNumber;
const int FaceQueryFilterMessage_FaceQueryFilter::kLinkTypeFieldNumber;
#endif  // !_MSC_VER

FaceQueryFilterMessage_FaceQueryFilter::FaceQueryFilterMessage_FaceQueryFilter()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ndn_message.FaceQueryFilterMessage.FaceQueryFilter)
}

void FaceQueryFilterMessage_FaceQueryFilter::InitAsDefaultInstance() {
}

FaceQueryFilterMessage_FaceQueryFilter::FaceQueryFilterMessage_FaceQueryFilter(const FaceQueryFilterMessage_FaceQueryFilter& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ndn_message.FaceQueryFilterMessage.FaceQueryFilter)
}

void FaceQueryFilterMessage_FaceQueryFilter::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  face_id_ = GOOGLE_ULONGLONG(0);
  uri_scheme_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  uri_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  local_uri_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  face_scope_ = 0;
  face_persistency_ = 0;
  link_type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FaceQueryFilterMessage_FaceQueryFilter::~FaceQueryFilterMessage_FaceQueryFilter() {
  // @@protoc_insertion_point(destructor:ndn_message.FaceQueryFilterMessage.FaceQueryFilter)
  SharedDtor();
}

void FaceQueryFilterMessage_FaceQueryFilter::SharedDtor() {
  if (uri_scheme_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete uri_scheme_;
  }
  if (uri_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete uri_;
  }
  if (local_uri_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete local_uri_;
  }
  if (this != default_instance_) {
  }
}

void FaceQueryFilterMessage_FaceQueryFilter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FaceQueryFilterMessage_FaceQueryFilter::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FaceQueryFilterMessage_FaceQueryFilter_descriptor_;
}

const FaceQueryFilterMessage_FaceQueryFilter& FaceQueryFilterMessage_FaceQueryFilter::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_face_2dquery_2dfilter_2eproto();
  return *default_instance_;
}

FaceQueryFilterMessage_FaceQueryFilter* FaceQueryFilterMessage_FaceQueryFilter::default_instance_ = NULL;

FaceQueryFilterMessage_FaceQueryFilter* FaceQueryFilterMessage_FaceQueryFilter::New() const {
  return new FaceQueryFilterMessage_FaceQueryFilter;
}

void FaceQueryFilterMessage_FaceQueryFilter::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<FaceQueryFilterMessage_FaceQueryFilter*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 127) {
    ZR_(face_scope_, link_type_);
    face_id_ = GOOGLE_ULONGLONG(0);
    if (has_uri_scheme()) {
      if (uri_scheme_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        uri_scheme_->clear();
      }
    }
    if (has_uri()) {
      if (uri_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        uri_->clear();
      }
    }
    if (has_local_uri()) {
      if (local_uri_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        local_uri_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FaceQueryFilterMessage_FaceQueryFilter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ndn_message.FaceQueryFilterMessage.FaceQueryFilter)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 face_id = 105;
      case 105: {
        if (tag == 840) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &face_id_)));
          set_has_face_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(914)) goto parse_uri;
        break;
      }

      // optional string uri = 114;
      case 114: {
        if (tag == 914) {
         parse_uri:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_uri()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->uri().data(), this->uri().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "uri");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(1034)) goto parse_local_uri;
        break;
      }

      // optional string local_uri = 129;
      case 129: {
        if (tag == 1034) {
         parse_local_uri:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_local_uri()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->local_uri().data(), this->local_uri().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "local_uri");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(1050)) goto parse_uri_scheme;
        break;
      }

      // optional string uri_scheme = 131;
      case 131: {
        if (tag == 1050) {
         parse_uri_scheme:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_uri_scheme()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->uri_scheme().data(), this->uri_scheme().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "uri_scheme");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(1056)) goto parse_face_scope;
        break;
      }

      // optional .ndn_message.FaceQueryFilterMessage.FaceScope face_scope = 132;
      case 132: {
        if (tag == 1056) {
         parse_face_scope:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::ndn_message::FaceQueryFilterMessage_FaceScope_IsValid(value)) {
            set_face_scope(static_cast< ::ndn_message::FaceQueryFilterMessage_FaceScope >(value));
          } else {
            mutable_unknown_fields()->AddVarint(132, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(1064)) goto parse_face_persistency;
        break;
      }

      // optional .ndn_message.FaceQueryFilterMessage.FacePersistency face_persistency = 133;
      case 133: {
        if (tag == 1064) {
         parse_face_persistency:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::ndn_message::FaceQueryFilterMessage_FacePersistency_IsValid(value)) {
            set_face_persistency(static_cast< ::ndn_message::FaceQueryFilterMessage_FacePersistency >(value));
          } else {
            mutable_unknown_fields()->AddVarint(133, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(1072)) goto parse_link_type;
        break;
      }

      // optional .ndn_message.FaceQueryFilterMessage.LinkType link_type = 134;
      case 134: {
        if (tag == 1072) {
         parse_link_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::ndn_message::FaceQueryFilterMessage_LinkType_IsValid(value)) {
            set_link_type(static_cast< ::ndn_message::FaceQueryFilterMessage_LinkType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(134, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ndn_message.FaceQueryFilterMessage.FaceQueryFilter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ndn_message.FaceQueryFilterMessage.FaceQueryFilter)
  return false;
#undef DO_
}

void FaceQueryFilterMessage_FaceQueryFilter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ndn_message.FaceQueryFilterMessage.FaceQueryFilter)
  // optional uint64 face_id = 105;
  if (has_face_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(105, this->face_id(), output);
  }

  // optional string uri = 114;
  if (has_uri()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->uri().data(), this->uri().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "uri");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      114, this->uri(), output);
  }

  // optional string local_uri = 129;
  if (has_local_uri()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->local_uri().data(), this->local_uri().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "local_uri");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      129, this->local_uri(), output);
  }

  // optional string uri_scheme = 131;
  if (has_uri_scheme()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->uri_scheme().data(), this->uri_scheme().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "uri_scheme");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      131, this->uri_scheme(), output);
  }

  // optional .ndn_message.FaceQueryFilterMessage.FaceScope face_scope = 132;
  if (has_face_scope()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      132, this->face_scope(), output);
  }

  // optional .ndn_message.FaceQueryFilterMessage.FacePersistency face_persistency = 133;
  if (has_face_persistency()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      133, this->face_persistency(), output);
  }

  // optional .ndn_message.FaceQueryFilterMessage.LinkType link_type = 134;
  if (has_link_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      134, this->link_type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ndn_message.FaceQueryFilterMessage.FaceQueryFilter)
}

::google::protobuf::uint8* FaceQueryFilterMessage_FaceQueryFilter::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ndn_message.FaceQueryFilterMessage.FaceQueryFilter)
  // optional uint64 face_id = 105;
  if (has_face_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(105, this->face_id(), target);
  }

  // optional string uri = 114;
  if (has_uri()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->uri().data(), this->uri().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "uri");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        114, this->uri(), target);
  }

  // optional string local_uri = 129;
  if (has_local_uri()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->local_uri().data(), this->local_uri().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "local_uri");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        129, this->local_uri(), target);
  }

  // optional string uri_scheme = 131;
  if (has_uri_scheme()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->uri_scheme().data(), this->uri_scheme().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "uri_scheme");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        131, this->uri_scheme(), target);
  }

  // optional .ndn_message.FaceQueryFilterMessage.FaceScope face_scope = 132;
  if (has_face_scope()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      132, this->face_scope(), target);
  }

  // optional .ndn_message.FaceQueryFilterMessage.FacePersistency face_persistency = 133;
  if (has_face_persistency()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      133, this->face_persistency(), target);
  }

  // optional .ndn_message.FaceQueryFilterMessage.LinkType link_type = 134;
  if (has_link_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      134, this->link_type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ndn_message.FaceQueryFilterMessage.FaceQueryFilter)
  return target;
}

int FaceQueryFilterMessage_FaceQueryFilter::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 face_id = 105;
    if (has_face_id()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->face_id());
    }

    // optional string uri_scheme = 131;
    if (has_uri_scheme()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->uri_scheme());
    }

    // optional string uri = 114;
    if (has_uri()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->uri());
    }

    // optional string local_uri = 129;
    if (has_local_uri()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->local_uri());
    }

    // optional .ndn_message.FaceQueryFilterMessage.FaceScope face_scope = 132;
    if (has_face_scope()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->face_scope());
    }

    // optional .ndn_message.FaceQueryFilterMessage.FacePersistency face_persistency = 133;
    if (has_face_persistency()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->face_persistency());
    }

    // optional .ndn_message.FaceQueryFilterMessage.LinkType link_type = 134;
    if (has_link_type()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->link_type());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FaceQueryFilterMessage_FaceQueryFilter::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FaceQueryFilterMessage_FaceQueryFilter* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FaceQueryFilterMessage_FaceQueryFilter*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FaceQueryFilterMessage_FaceQueryFilter::MergeFrom(const FaceQueryFilterMessage_FaceQueryFilter& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_face_id()) {
      set_face_id(from.face_id());
    }
    if (from.has_uri_scheme()) {
      set_uri_scheme(from.uri_scheme());
    }
    if (from.has_uri()) {
      set_uri(from.uri());
    }
    if (from.has_local_uri()) {
      set_local_uri(from.local_uri());
    }
    if (from.has_face_scope()) {
      set_face_scope(from.face_scope());
    }
    if (from.has_face_persistency()) {
      set_face_persistency(from.face_persistency());
    }
    if (from.has_link_type()) {
      set_link_type(from.link_type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FaceQueryFilterMessage_FaceQueryFilter::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FaceQueryFilterMessage_FaceQueryFilter::CopyFrom(const FaceQueryFilterMessage_FaceQueryFilter& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FaceQueryFilterMessage_FaceQueryFilter::IsInitialized() const {

  return true;
}

void FaceQueryFilterMessage_FaceQueryFilter::Swap(FaceQueryFilterMessage_FaceQueryFilter* other) {
  if (other != this) {
    std::swap(face_id_, other->face_id_);
    std::swap(uri_scheme_, other->uri_scheme_);
    std::swap(uri_, other->uri_);
    std::swap(local_uri_, other->local_uri_);
    std::swap(face_scope_, other->face_scope_);
    std::swap(face_persistency_, other->face_persistency_);
    std::swap(link_type_, other->link_type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FaceQueryFilterMessage_FaceQueryFilter::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FaceQueryFilterMessage_FaceQueryFilter_descriptor_;
  metadata.reflection = FaceQueryFilterMessage_FaceQueryFilter_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int FaceQueryFilterMessage::kFaceQueryFilterFieldNumber;
#endif  // !_MSC_VER

FaceQueryFilterMessage::FaceQueryFilterMessage()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ndn_message.FaceQueryFilterMessage)
}

void FaceQueryFilterMessage::InitAsDefaultInstance() {
}

FaceQueryFilterMessage::FaceQueryFilterMessage(const FaceQueryFilterMessage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ndn_message.FaceQueryFilterMessage)
}

void FaceQueryFilterMessage::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FaceQueryFilterMessage::~FaceQueryFilterMessage() {
  // @@protoc_insertion_point(destructor:ndn_message.FaceQueryFilterMessage)
  SharedDtor();
}

void FaceQueryFilterMessage::SharedDtor() {
  if (this != default_instance_) {
  }
}

void FaceQueryFilterMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FaceQueryFilterMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FaceQueryFilterMessage_descriptor_;
}

const FaceQueryFilterMessage& FaceQueryFilterMessage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_face_2dquery_2dfilter_2eproto();
  return *default_instance_;
}

FaceQueryFilterMessage* FaceQueryFilterMessage::default_instance_ = NULL;

FaceQueryFilterMessage* FaceQueryFilterMessage::New() const {
  return new FaceQueryFilterMessage;
}

void FaceQueryFilterMessage::Clear() {
  face_query_filter_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FaceQueryFilterMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ndn_message.FaceQueryFilterMessage)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .ndn_message.FaceQueryFilterMessage.FaceQueryFilter face_query_filter = 150;
      case 150: {
        if (tag == 1202) {
         parse_face_query_filter:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_face_query_filter()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(1202)) goto parse_face_query_filter;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ndn_message.FaceQueryFilterMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ndn_message.FaceQueryFilterMessage)
  return false;
#undef DO_
}

void FaceQueryFilterMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ndn_message.FaceQueryFilterMessage)
  // repeated .ndn_message.FaceQueryFilterMessage.FaceQueryFilter face_query_filter = 150;
  for (int i = 0; i < this->face_query_filter_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      150, this->face_query_filter(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ndn_message.FaceQueryFilterMessage)
}

::google::protobuf::uint8* FaceQueryFilterMessage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ndn_message.FaceQueryFilterMessage)
  // repeated .ndn_message.FaceQueryFilterMessage.FaceQueryFilter face_query_filter = 150;
  for (int i = 0; i < this->face_query_filter_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        150, this->face_query_filter(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ndn_message.FaceQueryFilterMessage)
  return target;
}

int FaceQueryFilterMessage::ByteSize() const {
  int total_size = 0;

  // repeated .ndn_message.FaceQueryFilterMessage.FaceQueryFilter face_query_filter = 150;
  total_size += 2 * this->face_query_filter_size();
  for (int i = 0; i < this->face_query_filter_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->face_query_filter(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FaceQueryFilterMessage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FaceQueryFilterMessage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FaceQueryFilterMessage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FaceQueryFilterMessage::MergeFrom(const FaceQueryFilterMessage& from) {
  GOOGLE_CHECK_NE(&from, this);
  face_query_filter_.MergeFrom(from.face_query_filter_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FaceQueryFilterMessage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FaceQueryFilterMessage::CopyFrom(const FaceQueryFilterMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FaceQueryFilterMessage::IsInitialized() const {

  return true;
}

void FaceQueryFilterMessage::Swap(FaceQueryFilterMessage* other) {
  if (other != this) {
    face_query_filter_.Swap(&other->face_query_filter_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FaceQueryFilterMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FaceQueryFilterMessage_descriptor_;
  metadata.reflection = FaceQueryFilterMessage_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace ndn_message

// @@protoc_insertion_point(global_scope)

#else // GOOGLE_PROTOBUF_VERSION < 3000000

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace ndn_message {

namespace {

const ::google::protobuf::Descriptor* FaceQueryFilterMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FaceQueryFilterMessage_reflection_ = NULL;
const ::google::protobuf::Descriptor* FaceQueryFilterMessage_FaceQueryFilter_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FaceQueryFilterMessage_FaceQueryFilter_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* FaceQueryFilterMessage_FaceScope_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* FaceQueryFilterMessage_FacePersistency_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* FaceQueryFilterMessage_LinkType_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_face_2dquery_2dfilter_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_face_2dquery_2dfilter_2eproto() {
  protobuf_AddDesc_face_2dquery_2dfilter_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "face-query-filter.proto");
  GOOGLE_CHECK(file != NULL);
  FaceQueryFilterMessage_descriptor_ = file->message_type(0);
  static const int FaceQueryFilterMessage_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FaceQueryFilterMessage, face_query_filter_),
  };
  FaceQueryFilterMessage_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      FaceQueryFilterMessage_descriptor_,
      FaceQueryFilterMessage::default_instance_,
      FaceQueryFilterMessage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FaceQueryFilterMessage, _has_bits_[0]),
      -1,
      -1,
      sizeof(FaceQueryFilterMessage),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FaceQueryFilterMessage, _internal_metadata_),
      -1);
  FaceQueryFilterMessage_FaceQueryFilter_descriptor_ = FaceQueryFilterMessage_descriptor_->nested_type(0);
  static const int FaceQueryFilterMessage_FaceQueryFilter_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FaceQueryFilterMessage_FaceQueryFilter, face_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FaceQueryFilterMessage_FaceQueryFilter, uri_scheme_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FaceQueryFilterMessage_FaceQueryFilter, uri_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FaceQueryFilterMessage_FaceQueryFilter, local_uri_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FaceQueryFilterMessage_FaceQueryFilter, face_scope_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FaceQueryFilterMessage_FaceQueryFilter, face_persistency_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FaceQueryFilterMessage_FaceQueryFilter, link_type_),
  };
  FaceQueryFilterMessage_FaceQueryFilter_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      FaceQueryFilterMessage_FaceQueryFilter_descriptor_,
      FaceQueryFilterMessage_FaceQueryFilter::default_instance_,
      FaceQueryFilterMessage_FaceQueryFilter_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FaceQueryFilterMessage_FaceQueryFilter, _has_bits_[0]),
      -1,
      -1,
      sizeof(FaceQueryFilterMessage_FaceQueryFilter),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FaceQueryFilterMessage_FaceQueryFilter, _internal_metadata_),
      -1);
  FaceQueryFilterMessage_FaceScope_descriptor_ = FaceQueryFilterMessage_descriptor_->enum_type(0);
  FaceQueryFilterMessage_FacePersistency_descriptor_ = FaceQueryFilterMessage_descriptor_->enum_type(1);
  FaceQueryFilterMessage_LinkType_descriptor_ = FaceQueryFilterMessage_descriptor_->enum_type(2);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_face_2dquery_2dfilter_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      FaceQueryFilterMessage_descriptor_, &FaceQueryFilterMessage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      FaceQueryFilterMessage_FaceQueryFilter_descriptor_, &FaceQueryFilterMessage_FaceQueryFilter::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_face_2dquery_2dfilter_2eproto() {
  delete FaceQueryFilterMessage::default_instance_;
  delete FaceQueryFilterMessage_reflection_;
  delete FaceQueryFilterMessage_FaceQueryFilter::default_instance_;
  delete FaceQueryFilterMessage_FaceQueryFilter_reflection_;
}

void protobuf_AddDesc_face_2dquery_2dfilter_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AddDesc_face_2dquery_2dfilter_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\027face-query-filter.proto\022\013ndn_message\"\264"
    "\004\n\026FaceQueryFilterMessage\022O\n\021face_query_"
    "filter\030\226\001 \003(\01323.ndn_message.FaceQueryFil"
    "terMessage.FaceQueryFilter\032\256\002\n\017FaceQuery"
    "Filter\022\017\n\007face_id\030i \001(\004\022\023\n\nuri_scheme\030\203\001"
    " \001(\t\022\013\n\003uri\030r \001(\t\022\022\n\tlocal_uri\030\201\001 \001(\t\022B\n"
    "\nface_scope\030\204\001 \001(\0162-.ndn_message.FaceQue"
    "ryFilterMessage.FaceScope\022N\n\020face_persis"
    "tency\030\205\001 \001(\01623.ndn_message.FaceQueryFilt"
    "erMessage.FacePersistency\022@\n\tlink_type\030\206"
    "\001 \001(\0162,.ndn_message.FaceQueryFilterMessa"
    "ge.LinkType\"%\n\tFaceScope\022\r\n\tNON_LOCAL\020\000\022"
    "\t\n\005LOCAL\020\001\"\?\n\017FacePersistency\022\016\n\nPERSIST"
    "ENT\020\000\022\r\n\tON_DEMAND\020\001\022\r\n\tPERMANENT\020\002\"0\n\010L"
    "inkType\022\022\n\016POINT_TO_POINT\020\000\022\020\n\014MULTI_ACC"
    "ESS\020\001", 605);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "face-query-filter.proto", &protobuf_RegisterTypes);
  FaceQueryFilterMessage::default_instance_ = new FaceQueryFilterMessage();
  FaceQueryFilterMessage_FaceQueryFilter::default_instance_ = new FaceQueryFilterMessage_FaceQueryFilter();
  FaceQueryFilterMessage::default_instance_->InitAsDefaultInstance();
  FaceQueryFilterMessage_FaceQueryFilter::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_face_2dquery_2dfilter_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_face_2dquery_2dfilter_2eproto {
  StaticDescriptorInitializer_face_2dquery_2dfilter_2eproto() {
    protobuf_AddDesc_face_2dquery_2dfilter_2eproto();
  }
} static_descriptor_initializer_face_2dquery_2dfilter_2eproto_;

// ===================================================================

const ::google::protobuf::EnumDescriptor* FaceQueryFilterMessage_FaceScope_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FaceQueryFilterMessage_FaceScope_descriptor_;
}
bool FaceQueryFilterMessage_FaceScope_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const FaceQueryFilterMessage_FaceScope FaceQueryFilterMessage::NON_LOCAL;
const FaceQueryFilterMessage_FaceScope FaceQueryFilterMessage::LOCAL;
const FaceQueryFilterMessage_FaceScope FaceQueryFilterMessage::FaceScope_MIN;
const FaceQueryFilterMessage_FaceScope FaceQueryFilterMessage::FaceScope_MAX;
const int FaceQueryFilterMessage::FaceScope_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* FaceQueryFilterMessage_FacePersistency_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FaceQueryFilterMessage_FacePersistency_descriptor_;
}
bool FaceQueryFilterMessage_FacePersistency_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const FaceQueryFilterMessage_FacePersistency FaceQueryFilterMessage::PERSISTENT;
const FaceQueryFilterMessage_FacePersistency FaceQueryFilterMessage::ON_DEMAND;
const FaceQueryFilterMessage_FacePersistency FaceQueryFilterMessage::PERMANENT;
const FaceQueryFilterMessage_FacePersistency FaceQueryFilterMessage::FacePersistency_MIN;
const FaceQueryFilterMessage_FacePersistency FaceQueryFilterMessage::FacePersistency_MAX;
const int FaceQueryFilterMessage::FacePersistency_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* FaceQueryFilterMessage_LinkType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FaceQueryFilterMessage_LinkType_descriptor_;
}
bool FaceQueryFilterMessage_LinkType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const FaceQueryFilterMessage_LinkType FaceQueryFilterMessage::POINT_TO_POINT;
const FaceQueryFilterMessage_LinkType FaceQueryFilterMessage::MULTI_ACCESS;
const FaceQueryFilterMessage_LinkType FaceQueryFilterMessage::LinkType_MIN;
const FaceQueryFilterMessage_LinkType FaceQueryFilterMessage::LinkType_MAX;
const int FaceQueryFilterMessage::LinkType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int FaceQueryFilterMessage_FaceQueryFilter::kFaceIdFieldNumber;
const int FaceQueryFilterMessage_FaceQueryFilter::kUriSchemeFieldNumber;
const int FaceQueryFilterMessage_FaceQueryFilter::kUriFieldNumber;
const int FaceQueryFilterMessage_FaceQueryFilter::kLocalUriFieldNumber;
const int FaceQueryFilterMessage_FaceQueryFilter::kFaceScopeFieldNumber;
const int FaceQueryFilterMessage_FaceQueryFilter::kFacePersistencyFieldNumber;
const int FaceQueryFilterMessage_FaceQueryFilter::kLinkTypeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

FaceQueryFilterMessage_FaceQueryFilter::FaceQueryFilterMessage_FaceQueryFilter()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ndn_message.FaceQueryFilterMessage.FaceQueryFilter)
}

void FaceQueryFilterMessage_FaceQueryFilter::InitAsDefaultInstance() {
}

FaceQueryFilterMessage_FaceQueryFilter::FaceQueryFilterMessage_FaceQueryFilter(const FaceQueryFilterMessage_FaceQueryFilter& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ndn_message.FaceQueryFilterMessage.FaceQueryFilter)
}

void FaceQueryFilterMessage_FaceQueryFilter::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  face_id_ = GOOGLE_ULONGLONG(0);
  uri_scheme_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  uri_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  local_uri_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  face_scope_ = 0;
  face_persistency_ = 0;
  link_type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FaceQueryFilterMessage_FaceQueryFilter::~FaceQueryFilterMessage_FaceQueryFilter() {
  // @@protoc_insertion_point(destructor:ndn_message.FaceQueryFilterMessage.FaceQueryFilter)
  SharedDtor();
}

void FaceQueryFilterMessage_FaceQueryFilter::SharedDtor() {
  uri_scheme_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  uri_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  local_uri_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void FaceQueryFilterMessage_FaceQueryFilter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FaceQueryFilterMessage_FaceQueryFilter::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FaceQueryFilterMessage_FaceQueryFilter_descriptor_;
}

const FaceQueryFilterMessage_FaceQueryFilter& FaceQueryFilterMessage_FaceQueryFilter::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_face_2dquery_2dfilter_2eproto();
  return *default_instance_;
}

FaceQueryFilterMessage_FaceQueryFilter* FaceQueryFilterMessage_FaceQueryFilter::default_instance_ = NULL;

FaceQueryFilterMessage_FaceQueryFilter* FaceQueryFilterMessage_FaceQueryFilter::New(::google::protobuf::Arena* arena) const {
  FaceQueryFilterMessage_FaceQueryFilter* n = new FaceQueryFilterMessage_FaceQueryFilter;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void FaceQueryFilterMessage_FaceQueryFilter::Clear() {
// @@protoc_insertion_point(message_clear_start:ndn_message.FaceQueryFilterMessage.FaceQueryFilter)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(FaceQueryFilterMessage_FaceQueryFilter, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<FaceQueryFilterMessage_FaceQueryFilter*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 127u) {
    ZR_(face_scope_, link_type_);
    face_id_ = GOOGLE_ULONGLONG(0);
    if (has_uri_scheme()) {
      uri_scheme_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_uri()) {
      uri_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_local_uri()) {
      local_uri_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool FaceQueryFilterMessage_FaceQueryFilter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ndn_message.FaceQueryFilterMessage.FaceQueryFilter)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 face_id = 105;
      case 105: {
        if (tag == 840) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &face_id_)));
          set_has_face_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(914)) goto parse_uri;
        break;
      }

      // optional string uri = 114;
      case 114: {
        if (tag == 914) {
         parse_uri:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_uri()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->uri().data(), this->uri().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ndn_message.FaceQueryFilterMessage.FaceQueryFilter.uri");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(1034)) goto parse_local_uri;
        break;
      }

      // optional string local_uri = 129;
      case 129: {
        if (tag == 1034) {
         parse_local_uri:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_local_uri()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->local_uri().data(), this->local_uri().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ndn_message.FaceQueryFilterMessage.FaceQueryFilter.local_uri");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(1050)) goto parse_uri_scheme;
        break;
      }

      // optional string uri_scheme = 131;
      case 131: {
        if (tag == 1050) {
         parse_uri_scheme:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_uri_scheme()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->uri_scheme().data(), this->uri_scheme().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ndn_message.FaceQueryFilterMessage.FaceQueryFilter.uri_scheme");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(1056)) goto parse_face_scope;
        break;
      }

      // optional .ndn_message.FaceQueryFilterMessage.FaceScope face_scope = 132;
      case 132: {
        if (tag == 1056) {
         parse_face_scope:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::ndn_message::FaceQueryFilterMessage_FaceScope_IsValid(value)) {
            set_face_scope(static_cast< ::ndn_message::FaceQueryFilterMessage_FaceScope >(value));
          } else {
            mutable_unknown_fields()->AddVarint(132, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(1064)) goto parse_face_persistency;
        break;
      }

      // optional .ndn_message.FaceQueryFilterMessage.FacePersistency face_persistency = 133;
      case 133: {
        if (tag == 1064) {
         parse_face_persistency:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::ndn_message::FaceQueryFilterMessage_FacePersistency_IsValid(value)) {
            set_face_persistency(static_cast< ::ndn_message::FaceQueryFilterMessage_FacePersistency >(value));
          } else {
            mutable_unknown_fields()->AddVarint(133, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(1072)) goto parse_link_type;
        break;
      }

      // optional .ndn_message.FaceQueryFilterMessage.LinkType link_type = 134;
      case 134: {
        if (tag == 1072) {
         parse_link_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::ndn_message::FaceQueryFilterMessage_LinkType_IsValid(value)) {
            set_link_type(static_cast< ::ndn_message::FaceQueryFilterMessage_LinkType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(134, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ndn_message.FaceQueryFilterMessage.FaceQueryFilter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ndn_message.FaceQueryFilterMessage.FaceQueryFilter)
  return false;
#undef DO_
}

void FaceQueryFilterMessage_FaceQueryFilter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ndn_message.FaceQueryFilterMessage.FaceQueryFilter)
  // optional uint64 face_id = 105;
  if (has_face_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(105, this->face_id(), output);
  }

  // optional string uri = 114;
  if (has_uri()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->uri().data(), this->uri().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ndn_message.FaceQueryFilterMessage.FaceQueryFilter.uri");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      114, this->uri(), output);
  }

  // optional string local_uri = 129;
  if (has_local_uri()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->local_uri().data(), this->local_uri().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ndn_message.FaceQueryFilterMessage.FaceQueryFilter.local_uri");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      129, this->local_uri(), output);
  }

  // optional string uri_scheme = 131;
  if (has_uri_scheme()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->uri_scheme().data(), this->uri_scheme().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ndn_message.FaceQueryFilterMessage.FaceQueryFilter.uri_scheme");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      131, this->uri_scheme(), output);
  }

  // optional .ndn_message.FaceQueryFilterMessage.FaceScope face_scope = 132;
  if (has_face_scope()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      132, this->face_scope(), output);
  }

  // optional .ndn_message.FaceQueryFilterMessage.FacePersistency face_persistency = 133;
  if (has_face_persistency()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      133, this->face_persistency(), output);
  }

  // optional .ndn_message.FaceQueryFilterMessage.LinkType link_type = 134;
  if (has_link_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      134, this->link_type(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ndn_message.FaceQueryFilterMessage.FaceQueryFilter)
}

::google::protobuf::uint8* FaceQueryFilterMessage_FaceQueryFilter::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ndn_message.FaceQueryFilterMessage.FaceQueryFilter)
  // optional uint64 face_id = 105;
  if (has_face_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(105, this->face_id(), target);
  }

  // optional string uri = 114;
  if (has_uri()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->uri().data(), this->uri().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ndn_message.FaceQueryFilterMessage.FaceQueryFilter.uri");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        114, this->uri(), target);
  }

  // optional string local_uri = 129;
  if (has_local_uri()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->local_uri().data(), this->local_uri().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ndn_message.FaceQueryFilterMessage.FaceQueryFilter.local_uri");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        129, this->local_uri(), target);
  }

  // optional string uri_scheme = 131;
  if (has_uri_scheme()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->uri_scheme().data(), this->uri_scheme().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ndn_message.FaceQueryFilterMessage.FaceQueryFilter.uri_scheme");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        131, this->uri_scheme(), target);
  }

  // optional .ndn_message.FaceQueryFilterMessage.FaceScope face_scope = 132;
  if (has_face_scope()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      132, this->face_scope(), target);
  }

  // optional .ndn_message.FaceQueryFilterMessage.FacePersistency face_persistency = 133;
  if (has_face_persistency()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      133, this->face_persistency(), target);
  }

  // optional .ndn_message.FaceQueryFilterMessage.LinkType link_type = 134;
  if (has_link_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      134, this->link_type(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ndn_message.FaceQueryFilterMessage.FaceQueryFilter)
  return target;
}

int FaceQueryFilterMessage_FaceQueryFilter::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:ndn_message.FaceQueryFilterMessage.FaceQueryFilter)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 127u) {
    // optional uint64 face_id = 105;
    if (has_face_id()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->face_id());
    }

    // optional string uri_scheme = 131;
    if (has_uri_scheme()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->uri_scheme());
    }

    // optional string uri = 114;
    if (has_uri()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->uri());
    }

    // optional string local_uri = 129;
    if (has_local_uri()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->local_uri());
    }

    // optional .ndn_message.FaceQueryFilterMessage.FaceScope face_scope = 132;
    if (has_face_scope()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->face_scope());
    }

    // optional .ndn_message.FaceQueryFilterMessage.FacePersistency face_persistency = 133;
    if (has_face_persistency()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->face_persistency());
    }

    // optional .ndn_message.FaceQueryFilterMessage.LinkType link_type = 134;
    if (has_link_type()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->link_type());
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FaceQueryFilterMessage_FaceQueryFilter::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ndn_message.FaceQueryFilterMessage.FaceQueryFilter)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const FaceQueryFilterMessage_FaceQueryFilter* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const FaceQueryFilterMessage_FaceQueryFilter>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ndn_message.FaceQueryFilterMessage.FaceQueryFilter)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ndn_message.FaceQueryFilterMessage.FaceQueryFilter)
    MergeFrom(*source);
  }
}

void FaceQueryFilterMessage_FaceQueryFilter::MergeFrom(const FaceQueryFilterMessage_FaceQueryFilter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ndn_message.FaceQueryFilterMessage.FaceQueryFilter)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_face_id()) {
      set_face_id(from.face_id());
    }
    if (from.has_uri_scheme()) {
      set_has_uri_scheme();
      uri_scheme_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.uri_scheme_);
    }
    if (from.has_uri()) {
      set_has_uri();
      uri_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.uri_);
    }
    if (from.has_local_uri()) {
      set_has_local_uri();
      local_uri_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.local_uri_);
    }
    if (from.has_face_scope()) {
      set_face_scope(from.face_scope());
    }
    if (from.has_face_persistency()) {
      set_face_persistency(from.face_persistency());
    }
    if (from.has_link_type()) {
      set_link_type(from.link_type());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void FaceQueryFilterMessage_FaceQueryFilter::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ndn_message.FaceQueryFilterMessage.FaceQueryFilter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FaceQueryFilterMessage_FaceQueryFilter::CopyFrom(const FaceQueryFilterMessage_FaceQueryFilter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ndn_message.FaceQueryFilterMessage.FaceQueryFilter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FaceQueryFilterMessage_FaceQueryFilter::IsInitialized() const {

  return true;
}

void FaceQueryFilterMessage_FaceQueryFilter::Swap(FaceQueryFilterMessage_FaceQueryFilter* other) {
  if (other == this) return;
  InternalSwap(other);
}
void FaceQueryFilterMessage_FaceQueryFilter::InternalSwap(FaceQueryFilterMessage_FaceQueryFilter* other) {
  std::swap(face_id_, other->face_id_);
  uri_scheme_.Swap(&other->uri_scheme_);
  uri_.Swap(&other->uri_);
  local_uri_.Swap(&other->local_uri_);
  std::swap(face_scope_, other->face_scope_);
  std::swap(face_persistency_, other->face_persistency_);
  std::swap(link_type_, other->link_type_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata FaceQueryFilterMessage_FaceQueryFilter::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FaceQueryFilterMessage_FaceQueryFilter_descriptor_;
  metadata.reflection = FaceQueryFilterMessage_FaceQueryFilter_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int FaceQueryFilterMessage::kFaceQueryFilterFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

FaceQueryFilterMessage::FaceQueryFilterMessage()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ndn_message.FaceQueryFilterMessage)
}

void FaceQueryFilterMessage::InitAsDefaultInstance() {
}

FaceQueryFilterMessage::FaceQueryFilterMessage(const FaceQueryFilterMessage& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ndn_message.FaceQueryFilterMessage)
}

void FaceQueryFilterMessage::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FaceQueryFilterMessage::~FaceQueryFilterMessage() {
  // @@protoc_insertion_point(destructor:ndn_message.FaceQueryFilterMessage)
  SharedDtor();
}

void FaceQueryFilterMessage::SharedDtor() {
  if (this != default_instance_) {
  }
}

void FaceQueryFilterMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FaceQueryFilterMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FaceQueryFilterMessage_descriptor_;
}

const FaceQueryFilterMessage& FaceQueryFilterMessage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_face_2dquery_2dfilter_2eproto();
  return *default_instance_;
}

FaceQueryFilterMessage* FaceQueryFilterMessage::default_instance_ = NULL;

FaceQueryFilterMessage* FaceQueryFilterMessage::New(::google::protobuf::Arena* arena) const {
  FaceQueryFilterMessage* n = new FaceQueryFilterMessage;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void FaceQueryFilterMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:ndn_message.FaceQueryFilterMessage)
  face_query_filter_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool FaceQueryFilterMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ndn_message.FaceQueryFilterMessage)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .ndn_message.FaceQueryFilterMessage.FaceQueryFilter face_query_filter = 150;
      case 150: {
        if (tag == 1202) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_face_query_filter:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_face_query_filter()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(1202)) goto parse_loop_face_query_filter;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ndn_message.FaceQueryFilterMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ndn_message.FaceQueryFilterMessage)
  return false;
#undef DO_
}

void FaceQueryFilterMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ndn_message.FaceQueryFilterMessage)
  // repeated .ndn_message.FaceQueryFilterMessage.FaceQueryFilter face_query_filter = 150;
  for (unsigned int i = 0, n = this->face_query_filter_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      150, this->face_query_filter(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ndn_message.FaceQueryFilterMessage)
}

::google::protobuf::uint8* FaceQueryFilterMessage::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ndn_message.FaceQueryFilterMessage)
  // repeated .ndn_message.FaceQueryFilterMessage.FaceQueryFilter face_query_filter = 150;
  for (unsigned int i = 0, n = this->face_query_filter_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        150, this->face_query_filter(i), false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ndn_message.FaceQueryFilterMessage)
  return target;
}

int FaceQueryFilterMessage::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:ndn_message.FaceQueryFilterMessage)
  int total_size = 0;

  // repeated .ndn_message.FaceQueryFilterMessage.FaceQueryFilter face_query_filter = 150;
  total_size += 2 * this->face_query_filter_size();
  for (int i = 0; i < this->face_query_filter_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->face_query_filter(i));
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FaceQueryFilterMessage::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ndn_message.FaceQueryFilterMessage)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const FaceQueryFilterMessage* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const FaceQueryFilterMessage>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ndn_message.FaceQueryFilterMessage)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ndn_message.FaceQueryFilterMessage)
    MergeFrom(*source);
  }
}

void FaceQueryFilterMessage::MergeFrom(const FaceQueryFilterMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ndn_message.FaceQueryFilterMessage)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  face_query_filter_.MergeFrom(from.face_query_filter_);
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void FaceQueryFilterMessage::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ndn_message.FaceQueryFilterMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FaceQueryFilterMessage::CopyFrom(const FaceQueryFilterMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ndn_message.FaceQueryFilterMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FaceQueryFilterMessage::IsInitialized() const {

  return true;
}

void FaceQueryFilterMessage::Swap(FaceQueryFilterMessage* other) {
  if (other == this) return;
  InternalSwap(other);
}
void FaceQueryFilterMessage::InternalSwap(FaceQueryFilterMessage* other) {
  face_query_filter_.UnsafeArenaSwap(&other->face_query_filter_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata FaceQueryFilterMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FaceQueryFilterMessage_descriptor_;
  metadata.reflection = FaceQueryFilterMessage_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// FaceQueryFilterMessage_FaceQueryFilter

// optional uint64 face_id = 105;
bool FaceQueryFilterMessage_FaceQueryFilter::has_face_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void FaceQueryFilterMessage_FaceQueryFilter::set_has_face_id() {
  _has_bits_[0] |= 0x00000001u;
}
void FaceQueryFilterMessage_FaceQueryFilter::clear_has_face_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void FaceQueryFilterMessage_FaceQueryFilter::clear_face_id() {
  face_id_ = GOOGLE_ULONGLONG(0);
  clear_has_face_id();
}
 ::google::protobuf::uint64 FaceQueryFilterMessage_FaceQueryFilter::face_id() const {
  // @@protoc_insertion_point(field_get:ndn_message.FaceQueryFilterMessage.FaceQueryFilter.face_id)
  return face_id_;
}
 void FaceQueryFilterMessage_FaceQueryFilter::set_face_id(::google::protobuf::uint64 value) {
  set_has_face_id();
  face_id_ = value;
  // @@protoc_insertion_point(field_set:ndn_message.FaceQueryFilterMessage.FaceQueryFilter.face_id)
}

// optional string uri_scheme = 131;
bool FaceQueryFilterMessage_FaceQueryFilter::has_uri_scheme() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void FaceQueryFilterMessage_FaceQueryFilter::set_has_uri_scheme() {
  _has_bits_[0] |= 0x00000002u;
}
void FaceQueryFilterMessage_FaceQueryFilter::clear_has_uri_scheme() {
  _has_bits_[0] &= ~0x00000002u;
}
void FaceQueryFilterMessage_FaceQueryFilter::clear_uri_scheme() {
  uri_scheme_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_uri_scheme();
}
 const ::std::string& FaceQueryFilterMessage_FaceQueryFilter::uri_scheme() const {
  // @@protoc_insertion_point(field_get:ndn_message.FaceQueryFilterMessage.FaceQueryFilter.uri_scheme)
  return uri_scheme_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void FaceQueryFilterMessage_FaceQueryFilter::set_uri_scheme(const ::std::string& value) {
  set_has_uri_scheme();
  uri_scheme_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ndn_message.FaceQueryFilterMessage.FaceQueryFilter.uri_scheme)
}
 void FaceQueryFilterMessage_FaceQueryFilter::set_uri_scheme(const char* value) {
  set_has_uri_scheme();
  uri_scheme_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ndn_message.FaceQueryFilterMessage.FaceQueryFilter.uri_scheme)
}
 void FaceQueryFilterMessage_FaceQueryFilter::set_uri_scheme(const char* value, size_t size) {
  set_has_uri_scheme();
  uri_scheme_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ndn_message.FaceQueryFilterMessage.FaceQueryFilter.uri_scheme)
}
 ::std::string* FaceQueryFilterMessage_FaceQueryFilter::mutable_uri_scheme() {
  set_has_uri_scheme();
  // @@protoc_insertion_point(field_mutable:ndn_message.FaceQueryFilterMessage.FaceQueryFilter.uri_scheme)
  return uri_scheme_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* FaceQueryFilterMessage_FaceQueryFilter::release_uri_scheme() {
  // @@protoc_insertion_point(field_release:ndn_message.FaceQueryFilterMessage.FaceQueryFilter.uri_scheme)
  clear_has_uri_scheme();
  return uri_scheme_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void FaceQueryFilterMessage_FaceQueryFilter::set_allocated_uri_scheme(::std::string* uri_scheme) {
  if (uri_scheme != NULL) {
    set_has_uri_scheme();
  } else {
    clear_has_uri_scheme();
  }
  uri_scheme_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), uri_scheme);
  // @@protoc_insertion_point(field_set_allocated:ndn_message.FaceQueryFilterMessage.FaceQueryFilter.uri_scheme)
}

// optional string uri = 114;
bool FaceQueryFilterMessage_FaceQueryFilter::has_uri() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void FaceQueryFilterMessage_FaceQueryFilter::set_has_uri() {
  _has_bits_[0] |= 0x00000004u;
}
void FaceQueryFilterMessage_FaceQueryFilter::clear_has_uri() {
  _has_bits_[0] &= ~0x00000004u;
}
void FaceQueryFilterMessage_FaceQueryFilter::clear_uri() {
  uri_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_uri();
}
 const ::std::string& FaceQueryFilterMessage_FaceQueryFilter::uri() const {
  // @@protoc_insertion_point(field_get:ndn_message.FaceQueryFilterMessage.FaceQueryFilter.uri)
  return uri_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void FaceQueryFilterMessage_FaceQueryFilter::set_uri(const ::std::string& value) {
  set_has_uri();
  uri_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ndn_message.FaceQueryFilterMessage.FaceQueryFilter.uri)
}
 void FaceQueryFilterMessage_FaceQueryFilter::set_uri(const char* value) {
  set_has_uri();
  uri_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ndn_message.FaceQueryFilterMessage.FaceQueryFilter.uri)
}
 void FaceQueryFilterMessage_FaceQueryFilter::set_uri(const char* value, size_t size) {
  set_has_uri();
  uri_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ndn_message.FaceQueryFilterMessage.FaceQueryFilter.uri)
}
 ::std::string* FaceQueryFilterMessage_FaceQueryFilter::mutable_uri() {
  set_has_uri();
  // @@protoc_insertion_point(field_mutable:ndn_message.FaceQueryFilterMessage.FaceQueryFilter.uri)
  return uri_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* FaceQueryFilterMessage_FaceQueryFilter::release_uri() {
  // @@protoc_insertion_point(field_release:ndn_message.FaceQueryFilterMessage.FaceQueryFilter.uri)
  clear_has_uri();
  return uri_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void FaceQueryFilterMessage_FaceQueryFilter::set_allocated_uri(::std::string* uri) {
  if (uri != NULL) {
    set_has_uri();
  } else {
    clear_has_uri();
  }
  uri_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), uri);
  // @@protoc_insertion_point(field_set_allocated:ndn_message.FaceQueryFilterMessage.FaceQueryFilter.uri)
}

// optional string local_uri = 129;
bool FaceQueryFilterMessage_FaceQueryFilter::has_local_uri() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void FaceQueryFilterMessage_FaceQueryFilter::set_has_local_uri() {
  _has_bits_[0] |= 0x00000008u;
}
void FaceQueryFilterMessage_FaceQueryFilter::clear_has_local_uri() {
  _has_bits_[0] &= ~0x00000008u;
}
void FaceQueryFilterMessage_FaceQueryFilter::clear_local_uri() {
  local_uri_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_local_uri();
}
 const ::std::string& FaceQueryFilterMessage_FaceQueryFilter::local_uri() const {
  // @@protoc_insertion_point(field_get:ndn_message.FaceQueryFilterMessage.FaceQueryFilter.local_uri)
  return local_uri_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void FaceQueryFilterMessage_FaceQueryFilter::set_local_uri(const ::std::string& value) {
  set_has_local_uri();
  local_uri_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ndn_message.FaceQueryFilterMessage.FaceQueryFilter.local_uri)
}
 void FaceQueryFilterMessage_FaceQueryFilter::set_local_uri(const char* value) {
  set_has_local_uri();
  local_uri_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ndn_message.FaceQueryFilterMessage.FaceQueryFilter.local_uri)
}
 void FaceQueryFilterMessage_FaceQueryFilter::set_local_uri(const char* value, size_t size) {
  set_has_local_uri();
  local_uri_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ndn_message.FaceQueryFilterMessage.FaceQueryFilter.local_uri)
}
 ::std::string* FaceQueryFilterMessage_FaceQueryFilter::mutable_local_uri() {
  set_has_local_uri();
  // @@protoc_insertion_point(field_mutable:ndn_message.FaceQueryFilterMessage.FaceQueryFilter.local_uri)
  return local_uri_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* FaceQueryFilterMessage_FaceQueryFilter::release_local_uri() {
  // @@protoc_insertion_point(field_release:ndn_message.FaceQueryFilterMessage.FaceQueryFilter.local_uri)
  clear_has_local_uri();
  return local_uri_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void FaceQueryFilterMessage_FaceQueryFilter::set_allocated_local_uri(::std::string* local_uri) {
  if (local_uri != NULL) {
    set_has_local_uri();
  } else {
    clear_has_local_uri();
  }
  local_uri_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), local_uri);
  // @@protoc_insertion_point(field_set_allocated:ndn_message.FaceQueryFilterMessage.FaceQueryFilter.local_uri)
}

// optional .ndn_message.FaceQueryFilterMessage.FaceScope face_scope = 132;
bool FaceQueryFilterMessage_FaceQueryFilter::has_face_scope() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void FaceQueryFilterMessage_FaceQueryFilter::set_has_face_scope() {
  _has_bits_[0] |= 0x00000010u;
}
void FaceQueryFilterMessage_FaceQueryFilter::clear_has_face_scope() {
  _has_bits_[0] &= ~0x00000010u;
}
void FaceQueryFilterMessage_FaceQueryFilter::clear_face_scope() {
  face_scope_ = 0;
  clear_has_face_scope();
}
 ::ndn_message::FaceQueryFilterMessage_FaceScope FaceQueryFilterMessage_FaceQueryFilter::face_scope() const {
  // @@protoc_insertion_point(field_get:ndn_message.FaceQueryFilterMessage.FaceQueryFilter.face_scope)
  return static_cast< ::ndn_message::FaceQueryFilterMessage_FaceScope >(face_scope_);
}
 void FaceQueryFilterMessage_FaceQueryFilter::set_face_scope(::ndn_message::FaceQueryFilterMessage_FaceScope value) {
  assert(::ndn_message::FaceQueryFilterMessage_FaceScope_IsValid(value));
  set_has_face_scope();
  face_scope_ = value;
  // @@protoc_insertion_point(field_set:ndn_message.FaceQueryFilterMessage.FaceQueryFilter.face_scope)
}

// optional .ndn_message.FaceQueryFilterMessage.FacePersistency face_persistency = 133;
bool FaceQueryFilterMessage_FaceQueryFilter::has_face_persistency() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void FaceQueryFilterMessage_FaceQueryFilter::set_has_face_persistency() {
  _has_bits_[0] |= 0x00000020u;
}
void FaceQueryFilterMessage_FaceQueryFilter::clear_has_face_persistency() {
  _has_bits_[0] &= ~0x00000020u;
}
void FaceQueryFilterMessage_FaceQueryFilter::clear_face_persistency() {
  face_persistency_ = 0;
  clear_has_face_persistency();
}
 ::ndn_message::FaceQueryFilterMessage_FacePersistency FaceQueryFilterMessage_FaceQueryFilter::face_persistency() const {
  // @@protoc_insertion_point(field_get:ndn_message.FaceQueryFilterMessage.FaceQueryFilter.face_persistency)
  return static_cast< ::ndn_message::FaceQueryFilterMessage_FacePersistency >(face_persistency_);
}
 void FaceQueryFilterMessage_FaceQueryFilter::set_face_persistency(::ndn_message::FaceQueryFilterMessage_FacePersistency value) {
  assert(::ndn_message::FaceQueryFilterMessage_FacePersistency_IsValid(value));
  set_has_face_persistency();
  face_persistency_ = value;
  // @@protoc_insertion_point(field_set:ndn_message.FaceQueryFilterMessage.FaceQueryFilter.face_persistency)
}

// optional .ndn_message.FaceQueryFilterMessage.LinkType link_type = 134;
bool FaceQueryFilterMessage_FaceQueryFilter::has_link_type() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void FaceQueryFilterMessage_FaceQueryFilter::set_has_link_type() {
  _has_bits_[0] |= 0x00000040u;
}
void FaceQueryFilterMessage_FaceQueryFilter::clear_has_link_type() {
  _has_bits_[0] &= ~0x00000040u;
}
void FaceQueryFilterMessage_FaceQueryFilter::clear_link_type() {
  link_type_ = 0;
  clear_has_link_type();
}
 ::ndn_message::FaceQueryFilterMessage_LinkType FaceQueryFilterMessage_FaceQueryFilter::link_type() const {
  // @@protoc_insertion_point(field_get:ndn_message.FaceQueryFilterMessage.FaceQueryFilter.link_type)
  return static_cast< ::ndn_message::FaceQueryFilterMessage_LinkType >(link_type_);
}
 void FaceQueryFilterMessage_FaceQueryFilter::set_link_type(::ndn_message::FaceQueryFilterMessage_LinkType value) {
  assert(::ndn_message::FaceQueryFilterMessage_LinkType_IsValid(value));
  set_has_link_type();
  link_type_ = value;
  // @@protoc_insertion_point(field_set:ndn_message.FaceQueryFilterMessage.FaceQueryFilter.link_type)
}

// -------------------------------------------------------------------

// FaceQueryFilterMessage

// repeated .ndn_message.FaceQueryFilterMessage.FaceQueryFilter face_query_filter = 150;
int FaceQueryFilterMessage::face_query_filter_size() const {
  return face_query_filter_.size();
}
void FaceQueryFilterMessage::clear_face_query_filter() {
  face_query_filter_.Clear();
}
const ::ndn_message::FaceQueryFilterMessage_FaceQueryFilter& FaceQueryFilterMessage::face_query_filter(int index) const {
  // @@protoc_insertion_point(field_get:ndn_message.FaceQueryFilterMessage.face_query_filter)
  return face_query_filter_.Get(index);
}
::ndn_message::FaceQueryFilterMessage_FaceQueryFilter* FaceQueryFilterMessage::mutable_face_query_filter(int index) {
  // @@protoc_insertion_point(field_mutable:ndn_message.FaceQueryFilterMessage.face_query_filter)
  return face_query_filter_.Mutable(index);
}
::ndn_message::FaceQueryFilterMessage_FaceQueryFilter* FaceQueryFilterMessage::add_face_query_filter() {
  // @@protoc_insertion_point(field_add:ndn_message.FaceQueryFilterMessage.face_query_filter)
  return face_query_filter_.Add();
}
::google::protobuf::RepeatedPtrField< ::ndn_message::FaceQueryFilterMessage_FaceQueryFilter >*
FaceQueryFilterMessage::mutable_face_query_filter() {
  // @@protoc_insertion_point(field_mutable_list:ndn_message.FaceQueryFilterMessage.face_query_filter)
  return &face_query_filter_;
}
const ::google::protobuf::RepeatedPtrField< ::ndn_message::FaceQueryFilterMessage_FaceQueryFilter >&
FaceQueryFilterMessage::face_query_filter() const {
  // @@protoc_insertion_point(field_list:ndn_message.FaceQueryFilterMessage.face_query_filter)
  return face_query_filter_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace ndn_message

// @@protoc_insertion_point(global_scope)

#endif // GOOGLE_PROTOBUF_VERSION < 3000000

#endif // NDN_CPP_HAVE_PROTOBUF
